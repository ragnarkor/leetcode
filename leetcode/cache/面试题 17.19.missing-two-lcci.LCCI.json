{"id":1000044,"fid":"面试题 17.19","name":"消失的两个数字","slug":"missing-two-lcci","link":"https://leetcode.cn/problems/missing-two-lcci/description/","percent":60.13584778298106,"level":"Hard","category":"LCCI","en_name":"Missing Two LCCI","cn_name":"消失的两个数字","totalAC":"42.9K","totalSubmit":"71.3K","likes":233,"dislikes":0,"desc":"<p>给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？</p>\n\n<p>以任意顺序返回这两个数字均可。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1]</code>\n<strong>输出: </strong>[2,3]</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[2,3]</code>\n<strong>输出: </strong>[1,4]</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>nums.length &lt;=&nbsp;30000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> missingTwo(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] missingTwo(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def missingTwo(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def missingTwo(self, nums: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* missingTwo(int* nums, int numsSize, int* returnSize){\n\n}\n"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] MissingTwo(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar missingTwo = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function missingTwo(nums: number[]): number[] {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function missingTwo($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func missingTwo(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun missingTwo(nums: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> missingTwo(List<int> nums) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func missingTwo(nums []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef missing_two(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def missingTwo(nums: Array[Int]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn missing_two(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (missing-two nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec missing_two(Nums :: [integer()]) -> [integer()].\nmissing_two(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec missing_two(nums :: [integer]) :: [integer]\n  def missing_two(nums) do\n\n  end\nend"}],"testcase":"[1]","testable":true,"templateMeta":{"name":"missingTwo","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}