{"id":100343,"fid":"LCR 187","name":"破冰游戏","slug":"yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof","link":"https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/description/","percent":65.086836603612,"level":"Easy","category":"algorithms","en_name":"破冰游戏","cn_name":"破冰游戏","totalAC":"208.2K","totalSubmit":"319.8K","likes":863,"dislikes":0,"desc":"<p>社团共有 <code>num</code>&nbsp;位成员参与破冰游戏，编号为 <code>0 ~ num-1</code>。成员们按照编号顺序围绕圆桌而坐。社长抽取一个数字 <code>target</code>，从 0 号成员起开始计数，排在第 <code>target</code> 位的成员离开圆桌，且成员离开后从下一个成员开始计数。请返回游戏结束时最后一位成员的编号。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 7, target = 4\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 12, target = 5\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10^5</code></li>\n\t<li><code>1 &lt;= target&nbsp;&lt;= 10^6</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int iceBreakingGame(int num, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int iceBreakingGame(int num, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def iceBreakingGame(self, num, target):\n        \"\"\"\n        :type num: int\n        :type target: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def iceBreakingGame(self, num: int, target: int) -> int:"},{"value":"c","text":"C","defaultCode":"int iceBreakingGame(int num, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int IceBreakingGame(int num, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @param {number} target\n * @return {number}\n */\nvar iceBreakingGame = function(num, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function iceBreakingGame(num: number, target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $target\n     * @return Integer\n     */\n    function iceBreakingGame($num, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func iceBreakingGame(_ num: Int, _ target: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun iceBreakingGame(num: Int, target: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int iceBreakingGame(int num, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func iceBreakingGame(num int, target int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @param {Integer} target\n# @return {Integer}\ndef ice_breaking_game(num, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def iceBreakingGame(num: Int, target: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn ice_breaking_game(num: i32, target: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (ice-breaking-game num target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec ice_breaking_game(Num :: integer(), Target :: integer()) -> integer().\nice_breaking_game(Num, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec ice_breaking_game(num :: integer, target :: integer) :: integer\n  def ice_breaking_game(num, target) do\n    \n  end\nend"}],"testcase":"7\n4","testable":true,"templateMeta":{"name":"iceBreakingGame","params":[{"name":"num","type":"integer"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}