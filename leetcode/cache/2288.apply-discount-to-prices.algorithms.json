{"id":2373,"fid":"2288","name":"价格减免","slug":"apply-discount-to-prices","link":"https://leetcode.cn/problems/apply-discount-to-prices/description/","percent":32.06778206778207,"level":"Medium","category":"algorithms","en_name":"Apply Discount to Prices","cn_name":"价格减免","totalAC":"11.1K","totalSubmit":"31.5K","likes":18,"dislikes":0,"desc":"<p><strong>句子</strong> 是由若干个单词组成的字符串，单词之间用单个空格分隔，其中每个单词可以包含数字、小写字母、和美元符号 <code>'$'</code> 。如果单词的形式为美元符号后跟着一个非负实数，那么这个单词就表示一个 <strong>价格</strong> 。</p>\n\n<ul>\n\t<li>例如 <code>\"$100\"</code>、<code>\"$23\"</code> 和 <code>\"$6\"</code> 表示价格，而 <code>\"100\"</code>、<code>\"$\"</code> 和 <code>\"$1e5</code> 不是。</li>\n</ul>\n\n<p>给你一个字符串 <code>sentence</code> 表示一个句子和一个整数 <code>discount</code> 。对于每个表示价格的单词，都在价格的基础上减免 <code>discount%</code> ，并 <strong>更新</strong> 该单词到句子中。所有更新后的价格应该表示为一个 <strong>恰好保留小数点后两位</strong> 的数字。</p>\n\n<p>返回表示修改后句子的字符串。</p>\n\n<p>注意：所有价格 <strong>最多</strong> 为&nbsp; <code>10</code> 位数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50\n<strong>输出：</strong>\"there are $0.50 $1.00 and 5$ candies in the shop\"\n<strong>解释：</strong>\n表示价格的单词是 \"$1\" 和 \"$2\" 。 \n- \"$1\" 减免 50% 为 \"$0.50\" ，所以 \"$1\" 替换为 \"$0.50\" 。\n- \"$2\" 减免 50% 为 \"$1\" ，所以 \"$1\" 替换为 \"$1.00\" 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100\n<strong>输出：</strong>\"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"\n<strong>解释：</strong>\n任何价格减免 100% 都会得到 0 。\n表示价格的单词分别是 \"$3\"、\"$5\"、\"$6\" 和 \"$9\"。\n每个单词都替换为 \"$0.00\"。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>sentence</code> 由小写英文字母、数字、<code>' '</code> 和&nbsp;<code>'$'</code> 组成</li>\n\t<li><code>sentence</code> 不含前导和尾随空格</li>\n\t<li><code>sentence</code> 的所有单词都用单个空格分隔</li>\n\t<li>所有价格都是 <strong>正</strong> 整数且不含前导零</li>\n\t<li>所有价格 <strong>最多</strong> 为&nbsp; <code>10</code> 位数字</li>\n\t<li><code>0 &lt;= discount &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string discountPrices(string sentence, int discount) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String discountPrices(String sentence, int discount) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def discountPrices(self, sentence, discount):\n        \"\"\"\n        :type sentence: str\n        :type discount: int\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:"},{"value":"c","text":"C","defaultCode":"char* discountPrices(char* sentence, int discount) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string DiscountPrices(string sentence, int discount) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} sentence\n * @param {number} discount\n * @return {string}\n */\nvar discountPrices = function(sentence, discount) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function discountPrices(sentence: string, discount: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $sentence\n     * @param Integer $discount\n     * @return String\n     */\n    function discountPrices($sentence, $discount) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func discountPrices(_ sentence: String, _ discount: Int) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun discountPrices(sentence: String, discount: Int): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String discountPrices(String sentence, int discount) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func discountPrices(sentence string, discount int) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} sentence\n# @param {Integer} discount\n# @return {String}\ndef discount_prices(sentence, discount)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def discountPrices(sentence: String, discount: Int): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn discount_prices(sentence: String, discount: i32) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (discount-prices sentence discount)\n  (-> string? exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec discount_prices(Sentence :: unicode:unicode_binary(), Discount :: integer()) -> unicode:unicode_binary().\ndiscount_prices(Sentence, Discount) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec discount_prices(sentence :: String.t, discount :: integer) :: String.t\n  def discount_prices(sentence, discount) do\n    \n  end\nend"}],"testcase":"\"there are $1 $2 and 5$ candies in the shop\"\n50","testable":true,"templateMeta":{"name":"discountPrices","params":[{"name":"sentence","type":"string"},{"type":"integer","name":"discount"}],"return":{"type":"string"}}}