{"id":100273,"fid":"LCR 125","name":"图书整理 II","slug":"yong-liang-ge-zhan-shi-xian-dui-lie-lcof","link":"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/description/","percent":70.33167913592511,"level":"Easy","category":"algorithms","en_name":"图书整理 II","cn_name":"图书整理 II","totalAC":"597.5K","totalSubmit":"849.6K","likes":796,"dislikes":0,"desc":"<p>读者来到图书馆排队借还书，图书管理员使用两个书车来完成整理借还书的任务。书车中的书从下往上叠加存放，图书管理员每次只能拿取书车顶部的书。排队的读者会有两种操作：</p>\n\n<ul>\n\t<li><code>push(bookID)</code>：把借阅的书籍还到图书馆。</li>\n\t<li><code>pop()</code>：从图书馆中借出书籍。</li>\n</ul>\n\n<p>为了保持图书的顺序，图书管理员每次取出供读者借阅的书籍是 <strong>最早</strong> 归还到图书馆的书籍。你需要返回 <strong>每次读者借出书的值</strong> 。</p>\n\n<p>如果没有归还的书可以取出，返回&nbsp;<code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[\"BookQueue\", \"push\", \"push\", \"pop\"]\n[[], [1], [2], []]\n<strong>输出：</strong>[null,null,null,1]\n<strong>解释：\n</strong>MyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.pop(); // return 1, queue is [2]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bookID &lt;= 10000</code></li>\n\t<li>最多会对 <code>push</code>、<code>pop</code> 进行 <code>10000</code> 次调用</li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class CQueue {\npublic:\n    CQueue() {\n\n    }\n    \n    void appendTail(int value) {\n\n    }\n    \n    int deleteHead() {\n\n    }\n};\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue* obj = new CQueue();\n * obj->appendTail(value);\n * int param_2 = obj->deleteHead();\n */"},{"value":"java","text":"Java","defaultCode":"class CQueue {\n\n    public CQueue() {\n\n    }\n    \n    public void appendTail(int value) {\n\n    }\n    \n    public int deleteHead() {\n\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.appendTail(value);\n * int param_2 = obj.deleteHead();\n */"},{"value":"python","text":"Python","defaultCode":"class CQueue(object):\n\n    def __init__(self):\n\n\n    def appendTail(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: None\n        \"\"\"\n\n\n    def deleteHead(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n\n# Your CQueue object will be instantiated and called as such:\n# obj = CQueue()\n# obj.appendTail(value)\n# param_2 = obj.deleteHead()"},{"value":"python3","text":"Python3","defaultCode":"class CQueue:\n\n    def __init__(self):\n\n\n    def appendTail(self, value: int) -> None:\n\n\n    def deleteHead(self) -> int:\n\n\n\n# Your CQueue object will be instantiated and called as such:\n# obj = CQueue()\n# obj.appendTail(value)\n# param_2 = obj.deleteHead()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} CQueue;\n\n\nCQueue* cQueueCreate() {\n    \n}\n\nvoid cQueueAppendTail(CQueue* obj, int value) {\n    \n}\n\nint cQueueDeleteHead(CQueue* obj) {\n    \n}\n\nvoid cQueueFree(CQueue* obj) {\n    \n}\n\n/**\n * Your CQueue struct will be instantiated and called as such:\n * CQueue* obj = cQueueCreate();\n * cQueueAppendTail(obj, value);\n \n * int param_2 = cQueueDeleteHead(obj);\n \n * cQueueFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class CQueue {\n\n    public CQueue() {\n\n    }\n    \n    public void AppendTail(int value) {\n\n    }\n    \n    public int DeleteHead() {\n\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.AppendTail(value);\n * int param_2 = obj.DeleteHead();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar CQueue = function() {\n\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nCQueue.prototype.appendTail = function(value) {\n\n};\n\n/**\n * @return {number}\n */\nCQueue.prototype.deleteHead = function() {\n\n};\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * var obj = new CQueue()\n * obj.appendTail(value)\n * var param_2 = obj.deleteHead()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class CQueue {\n    constructor() {\n        \n    }\n\n    appendTail(value: number): void {\n        \n    }\n\n    deleteHead(): number {\n        \n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * var obj = new CQueue()\n * obj.appendTail(value)\n * var param_2 = obj.deleteHead()\n */"},{"value":"php","text":"PHP","defaultCode":"class CQueue {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $value\n     * @return NULL\n     */\n    function appendTail($value) {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function deleteHead() {\n\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * $obj = CQueue();\n * $obj->appendTail($value);\n * $ret_2 = $obj->deleteHead();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass CQueue {\n\n    init() {\n\n    }\n    \n    func appendTail(_ value: Int) {\n\n    }\n    \n    func deleteHead() -> Int {\n\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * let obj = CQueue()\n * obj.appendTail(value)\n * let ret_2: Int = obj.deleteHead()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class CQueue() {\n\n    fun appendTail(value: Int) {\n\n    }\n\n    fun deleteHead(): Int {\n\n    }\n\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * var obj = CQueue()\n * obj.appendTail(value)\n * var param_2 = obj.deleteHead()\n */"},{"value":"dart","text":"Dart","defaultCode":"class CQueue {\n\n  CQueue() {\n    \n  }\n  \n  void appendTail(int value) {\n    \n  }\n  \n  int deleteHead() {\n    \n  }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = CQueue();\n * obj.appendTail(value);\n * int param2 = obj.deleteHead();\n */"},{"value":"golang","text":"Go","defaultCode":"type CQueue struct {\n\n}\n\n\nfunc Constructor() CQueue {\n\n}\n\n\nfunc (this *CQueue) AppendTail(value int)  {\n\n}\n\n\nfunc (this *CQueue) DeleteHead() int {\n\n}\n\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AppendTail(value);\n * param_2 := obj.DeleteHead();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class CQueue\n    def initialize()\n\n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Void\n=end\n    def append_tail(value)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def delete_head()\n\n    end\n\n\nend\n\n# Your CQueue object will be instantiated and called as such:\n# obj = CQueue.new()\n# obj.append_tail(value)\n# param_2 = obj.delete_head()"},{"value":"scala","text":"Scala","defaultCode":"class CQueue() {\n\n    def appendTail(value: Int) {\n\n    }\n\n    def deleteHead(): Int = {\n\n    }\n\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * var obj = new CQueue()\n * obj.appendTail(value)\n * var param_2 = obj.deleteHead()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct CQueue {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CQueue {\n\n    fn new() -> Self {\n\n    }\n    \n    fn append_tail(&self, value: i32) {\n\n    }\n    \n    fn delete_head(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * let obj = CQueue::new();\n * obj.append_tail(value);\n * let ret_2: i32 = obj.delete_head();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define c-queue%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; append-tail : exact-integer? -> void?\n    (define/public (append-tail value)\n      )\n    ; delete-head : -> exact-integer?\n    (define/public (delete-head)\n      )))\n\n;; Your c-queue% object will be instantiated and called as such:\n;; (define obj (new c-queue%))\n;; (send obj append-tail value)\n;; (define param_2 (send obj delete-head))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec c_queue_init_() -> any().\nc_queue_init_() ->\n  .\n\n-spec c_queue_append_tail(Value :: integer()) -> any().\nc_queue_append_tail(Value) ->\n  .\n\n-spec c_queue_delete_head() -> integer().\nc_queue_delete_head() ->\n  .\n\n\n%% Your functions will be called as such:\n%% c_queue_init_(),\n%% c_queue_append_tail(Value),\n%% Param_2 = c_queue_delete_head(),\n\n%% c_queue_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule CQueue do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec append_tail(value :: integer) :: any\n  def append_tail(value) do\n    \n  end\n\n  @spec delete_head() :: integer\n  def delete_head() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# CQueue.init_()\n# CQueue.append_tail(value)\n# param_2 = CQueue.delete_head()\n\n# CQueue.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]","testable":true,"templateMeta":{"classname":"CQueue","maxbytesperline":200000,"constructor":{"params":[]},"methods":[{"name":"appendTail","params":[{"type":"integer","name":"value"}],"return":{"type":"void"}},{"name":"deleteHead","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}