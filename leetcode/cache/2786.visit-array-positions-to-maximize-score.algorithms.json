{"id":2893,"fid":"2786","name":"访问数组中的位置使分数最大","slug":"visit-array-positions-to-maximize-score","link":"https://leetcode.cn/problems/visit-array-positions-to-maximize-score/description/","percent":40.296876422912305,"level":"Medium","category":"algorithms","en_name":"Visit Array Positions to Maximize Score","cn_name":"访问数组中的位置使分数最大","totalAC":"12.9K","totalSubmit":"26.4K","likes":40,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;和一个正整数&nbsp;<code>x</code>&nbsp;。</p>\n\n<p>你 <strong>一开始</strong>&nbsp;在数组的位置 <code>0</code>&nbsp;处，你可以按照下述规则访问数组中的其他位置：</p>\n\n<ul>\n\t<li>如果你当前在位置&nbsp;<code>i</code>&nbsp;，那么你可以移动到满足&nbsp;<code>i &lt; j</code>&nbsp;的&nbsp;<strong>任意</strong>&nbsp;位置&nbsp;<code>j</code>&nbsp;。</li>\n\t<li>对于你访问的位置 <code>i</code>&nbsp;，你可以获得分数&nbsp;<code>nums[i]</code>&nbsp;。</li>\n\t<li>如果你从位置 <code>i</code>&nbsp;移动到位置 <code>j</code>&nbsp;且&nbsp;<code>nums[i]</code> 和&nbsp;<code>nums[j]</code>&nbsp;的 <strong>奇偶性</strong>&nbsp;不同，那么你将失去分数&nbsp;<code>x</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回你能得到的 <strong>最大</strong>&nbsp;得分之和。</p>\n\n<p><strong>注意</strong>&nbsp;，你一开始的分数为&nbsp;<code>nums[0]</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [2,3,6,1,9,2], x = 5\n<b>输出：</b>13\n<b>解释：</b>我们可以按顺序访问数组中的位置：0 -&gt; 2 -&gt; 3 -&gt; 4 。\n对应位置的值为 2 ，6 ，1 和 9 。因为 6 和 1 的奇偶性不同，所以下标从 2 -&gt; 3 让你失去 x = 5 分。\n总得分为：2 + 6 + 1 + 9 - 5 = 13 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [2,4,6,8], x = 3\n<b>输出：</b>20\n<b>解释：</b>数组中的所有元素奇偶性都一样，所以我们可以将每个元素都访问一次，而且不会失去任何分数。\n总得分为：2 + 4 + 6 + 8 = 20 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], x &lt;= 10<sup>6</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    long long maxScore(vector<int>& nums, int x) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public long maxScore(int[] nums, int x) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxScore(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:"},{"value":"c","text":"C","defaultCode":"long long maxScore(int* nums, int numsSize, int x){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public long MaxScore(int[] nums, int x) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar maxScore = function(nums, x) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxScore(nums: number[], x: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function maxScore($nums, $x) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxScore(_ nums: [Int], _ x: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxScore(nums: IntArray, x: Int): Long {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxScore(List<int> nums, int x) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxScore(nums []int, x int) int64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} x\n# @return {Integer}\ndef max_score(nums, x)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxScore(nums: Array[Int], x: Int): Long = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_score(nums: Vec<i32>, x: i32) -> i64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-score nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_score(Nums :: [integer()], X :: integer()) -> integer().\nmax_score(Nums, X) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_score(nums :: [integer], x :: integer) :: integer\n  def max_score(nums, x) do\n\n  end\nend"}],"testcase":"[2,3,6,1,9,2]\n5","testable":true,"templateMeta":{"name":"maxScore","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"x"}],"return":{"type":"long"}}}