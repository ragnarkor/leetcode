{"id":2955,"fid":"2806","name":"取整购买后的账户余额","slug":"account-balance-after-rounded-purchase","link":"https://leetcode.cn/problems/account-balance-after-rounded-purchase/description/","percent":62.575844304522036,"level":"Easy","category":"algorithms","en_name":"Account Balance After Rounded Purchase","cn_name":"取整购买后的账户余额","totalAC":"9.5K","totalSubmit":"14.2K","likes":14,"dislikes":0,"desc":"<p>一开始，你的银行账户里有&nbsp;<code>100</code>&nbsp;块钱。</p>\n\n<p>给你一个整数<code>purchaseAmount</code>&nbsp;，它表示你在一次购买中愿意支出的金额。</p>\n\n<p>在一个商店里，你进行一次购买，实际支出的金额会向 <strong>最近</strong>&nbsp;的&nbsp;<code>10</code>&nbsp;的 <strong>倍数</strong>&nbsp;取整。换句话说，你实际会支付一个&nbsp;<strong>非负</strong>&nbsp;金额&nbsp;<code>roundedAmount</code>&nbsp;，满足&nbsp;<code>roundedAmount</code>&nbsp;是&nbsp;<code>10</code>&nbsp;的倍数且&nbsp;<code>abs(roundedAmount - purchaseAmount)</code>&nbsp;的值 <strong>最小</strong>&nbsp;。</p>\n\n<p>如果存在多于一个最接近的 <code>10</code>&nbsp;的倍数，<strong>较大的倍数</strong>&nbsp;是你的实际支出金额。</p>\n\n<p>请你返回一个整数，表示你在愿意支出金额为<em>&nbsp;</em><code>purchaseAmount</code><em>&nbsp;</em>块钱的前提下，购买之后剩下的余额。</p>\n\n<p><strong>注意：</strong> <code>0</code>&nbsp;也是&nbsp;<code>10</code>&nbsp;的倍数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>purchaseAmount = 9\n<b>输出：</b>90\n<b>解释：</b>这个例子中，最接近 9 的 10 的倍数是 10 。所以你的账户余额为 100 - 10 = 90 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>purchaseAmount = 15\n<b>输出：</b>80\n<b>解释：</b>这个例子中，有 2 个最接近 15 的 10 的倍数：10 和 20，较大的数 20 是你的实际开销。\n所以你的账户余额为 100 - 20 = 80 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= purchaseAmount &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int accountBalanceAfterPurchase(int purchaseAmount) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int accountBalanceAfterPurchase(int purchaseAmount) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def accountBalanceAfterPurchase(self, purchaseAmount):\n        \"\"\"\n        :type purchaseAmount: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def accountBalanceAfterPurchase(self, purchaseAmount: int) -> int:"},{"value":"c","text":"C","defaultCode":"int accountBalanceAfterPurchase(int purchaseAmount){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int AccountBalanceAfterPurchase(int purchaseAmount) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} purchaseAmount\n * @return {number}\n */\nvar accountBalanceAfterPurchase = function(purchaseAmount) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function accountBalanceAfterPurchase(purchaseAmount: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $purchaseAmount\n     * @return Integer\n     */\n    function accountBalanceAfterPurchase($purchaseAmount) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func accountBalanceAfterPurchase(_ purchaseAmount: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun accountBalanceAfterPurchase(purchaseAmount: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int accountBalanceAfterPurchase(int purchaseAmount) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func accountBalanceAfterPurchase(purchaseAmount int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} purchase_amount\n# @return {Integer}\ndef account_balance_after_purchase(purchase_amount)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def accountBalanceAfterPurchase(purchaseAmount: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn account_balance_after_purchase(purchase_amount: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (account-balance-after-purchase purchaseAmount)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec account_balance_after_purchase(PurchaseAmount :: integer()) -> integer().\naccount_balance_after_purchase(PurchaseAmount) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec account_balance_after_purchase(purchase_amount :: integer) :: integer\n  def account_balance_after_purchase(purchase_amount) do\n\n  end\nend"}],"testcase":"9","testable":true,"templateMeta":{"name":"accountBalanceAfterPurchase","params":[{"name":"purchaseAmount","type":"integer"}],"return":{"type":"integer"},"languages":["cpp","java","python","c","csharp","javascript","ruby","swift","golang","python3","scala","kotlin","rust","php","typescript","racket","erlang","elixir","dart"]}}