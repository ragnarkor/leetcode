{"id":100279,"fid":"LCR 129","name":"字母迷宫","slug":"ju-zhen-zhong-de-lu-jing-lcof","link":"https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/description/","percent":45.67634778100852,"level":"Medium","category":"algorithms","en_name":"字母迷宫","cn_name":"字母迷宫","totalAC":"356.1K","totalSubmit":"779.5K","likes":840,"dislikes":0,"desc":"<p>字母迷宫游戏初始界面记作 <code>m x n</code> 二维字符串数组 <code>grid</code>，请判断玩家是否能在 <code>grid</code> 中找到目标单词 <code>target</code>。<br />\n注意：寻找单词时 <strong>必须</strong> 按照字母顺序，通过水平或垂直方向相邻的单元格内的字母构成，同时，同一个单元格内的字母&nbsp;<strong>不允许被重复使用&nbsp;</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], target = \"ABCCED\"\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], target = \"SEE\"\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], target = \"ABCB\"\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n = grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= target.length &lt;= 15</code></li>\n\t<li><code>grid</code> 和 <code>target</code> 仅由大小写英文字母组成</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong>本题与主站 79 题相同：<a href=\"https://leetcode-cn.com/problems/word-search/\">https://leetcode-cn.com/problems/word-search/</a></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool wordPuzzle(vector<vector<char>>& grid, string target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean wordPuzzle(char[][] grid, String target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def wordPuzzle(self, grid, target):\n        \"\"\"\n        :type grid: List[List[str]]\n        :type target: str\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordPuzzle(self, grid: List[List[str]], target: str) -> bool:"},{"value":"c","text":"C","defaultCode":"bool wordPuzzle(char** grid, int gridSize, int* gridColSize, char* target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool WordPuzzle(char[][] grid, string target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[][]} grid\n * @param {string} target\n * @return {boolean}\n */\nvar wordPuzzle = function(grid, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function wordPuzzle(grid: string[][], target: string): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @param String $target\n     * @return Boolean\n     */\n    function wordPuzzle($grid, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordPuzzle(_ grid: [[Character]], _ target: String) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordPuzzle(grid: Array<CharArray>, target: String): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool wordPuzzle(List<List<String>> grid, String target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordPuzzle(grid [][]byte, target string) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} grid\n# @param {String} target\n# @return {Boolean}\ndef word_puzzle(grid, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordPuzzle(grid: Array[Array[Char]], target: String): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn word_puzzle(grid: Vec<Vec<char>>, target: String) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (word-puzzle grid target)\n  (-> (listof (listof char?)) string? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec word_puzzle(Grid :: [[char()]], Target :: unicode:unicode_binary()) -> boolean().\nword_puzzle(Grid, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec word_puzzle(grid :: [[char]], target :: String.t) :: boolean\n  def word_puzzle(grid, target) do\n    \n  end\nend"}],"testcase":"[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCCED\"","testable":true,"templateMeta":{"name":"wordPuzzle","params":[{"name":"grid","type":"character[][]"},{"name":"target","type":"string"}],"return":{"type":"boolean"}}}