{"id":100339,"fid":"LCR 185","name":"统计结果概率","slug":"nge-tou-zi-de-dian-shu-lcof","link":"https://leetcode.cn/problems/nge-tou-zi-de-dian-shu-lcof/description/","percent":57.55948041760987,"level":"Medium","category":"algorithms","en_name":"统计结果概率","cn_name":"统计结果概率","totalAC":"135.8K","totalSubmit":"235.6K","likes":591,"dislikes":0,"desc":"<p>你选择掷出 <code>num</code> 个色子，请返回所有点数总和的概率。</p>\n\n<p>你需要用一个浮点数数组返回答案，其中第 <code>i</code> 个元素代表这 <code>num</code> 个骰子所能掷出的点数集合中第 <code>i</code> 小的那个的概率。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 3\n<strong>输出：</strong>[0.00463,0.01389,0.02778,0.04630,0.06944,0.09722,0.11574,0.12500,0.12500,0.11574,0.09722,0.06944,0.04630,0.02778,0.01389,0.00463]\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 5\n<strong>输出:</strong>[0.00013,0.00064,0.00193,0.00450,0.00900,0.01620,0.02636,0.03922,0.05401,0.06944,0.08372,0.09452,0.10031,0.10031,0.09452,0.08372,0.06944,0.05401,0.03922,0.02636,0.01620,0.00900,0.00450,0.00193,0.00064,0.00013]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 11</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<double> statisticsProbability(int num) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double[] statisticsProbability(int num) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def statisticsProbability(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[float]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def statisticsProbability(self, num: int) -> List[float]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* statisticsProbability(int num, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double[] StatisticsProbability(int num) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {number[]}\n */\nvar statisticsProbability = function(num) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function statisticsProbability(num: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Float[]\n     */\n    function statisticsProbability($num) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func statisticsProbability(_ num: Int) -> [Double] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun statisticsProbability(num: Int): DoubleArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<double> statisticsProbability(int num) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func statisticsProbability(num int) []float64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {Float[]}\ndef statistics_probability(num)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def statisticsProbability(num: Int): Array[Double] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn statistics_probability(num: i32) -> Vec<f64> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (statistics-probability num)\n  (-> exact-integer? (listof flonum?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec statistics_probability(Num :: integer()) -> [float()].\nstatistics_probability(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec statistics_probability(num :: integer) :: [float]\n  def statistics_probability(num) do\n    \n  end\nend"}],"testcase":"3","testable":true,"templateMeta":{"name":"statisticsProbability","params":[{"name":"num","type":"integer"}],"return":{"type":"double[]"}}}