{"id":3427,"fid":"3152","name":"特殊数组 II","slug":"special-array-ii","link":"https://leetcode.cn/problems/special-array-ii/description/","percent":30.406916984098192,"level":"Medium","category":"algorithms","en_name":"Special Array II","cn_name":"特殊数组 II","totalAC":"22.4K","totalSubmit":"52.2K","likes":38,"dislikes":0,"desc":"<p>如果数组的每一对相邻元素都是两个奇偶性不同的数字，则该数组被认为是一个 <strong>特殊数组</strong> 。</p>\n\n<p>你有一个整数数组 <code>nums</code> 和一个二维整数矩阵 <code>queries</code>，对于 <code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>，请你帮助你检查 <span data-keyword=\"subarray\">子数组</span> <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> 是不是一个 <strong>特殊数组 </strong>。</p>\n\n<p>返回布尔数组 <code>answer</code>，如果 <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> 是特殊数组，则 <code>answer[i]</code> 为 <code>true</code> ，否则，<code>answer[i]</code> 为 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [3,4,1,2,6], queries = [[0,4]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">[false]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>子数组是 <code>[3,4,1,2,6]</code>。2 和 6 都是偶数。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [4,3,1,6], queries = [[0,2],[2,3]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">[false,true]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<ol>\n\t<li>子数组是 <code>[4,3,1]</code>。3 和 1 都是奇数。因此这个查询的答案是 <code>false</code>。</li>\n\t<li>子数组是 <code>[1,6]</code>。只有一对：<code>(1,6)</code>，且包含了奇偶性不同的数字。因此这个查询的答案是 <code>true</code>。</li>\n</ol>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= nums.length - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<bool> isArraySpecial(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean[] isArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isArraySpecial(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* isArraySpecial(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool[] IsArraySpecial(int[] nums, int[][] queries) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar isArraySpecial = function(nums, queries) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isArraySpecial(nums: number[], queries: number[][]): boolean[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function isArraySpecial($nums, $queries) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isArraySpecial(_ nums: [Int], _ queries: [[Int]]) -> [Bool] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isArraySpecial(nums: IntArray, queries: Array<IntArray>): BooleanArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<bool> isArraySpecial(List<int> nums, List<List<int>> queries) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isArraySpecial(nums []int, queries [][]int) []bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef is_array_special(nums, queries)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isArraySpecial(nums: Array[Int], queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_array_special(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<bool> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-array-special nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof boolean?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_array_special(Nums :: [integer()], Queries :: [[integer()]]) -> [boolean()].\nis_array_special(Nums, Queries) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_array_special(nums :: [integer], queries :: [[integer]]) :: [boolean]\n  def is_array_special(nums, queries) do\n    \n  end\nend"}],"testcase":"[3,4,1,2,6]\n[[0,4]]","testable":true,"templateMeta":{"name":"isArraySpecial","params":[{"name":"nums","type":"integer[]"},{"type":"integer[][]","name":"queries"}],"return":{"type":"boolean[]"}}}