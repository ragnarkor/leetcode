{"id":100304,"fid":"LCR 161","name":"连续天数的最高销售额","slug":"lian-xu-zi-shu-zu-de-zui-da-he-lcof","link":"https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/description/","percent":60.039908533654014,"level":"Easy","category":"algorithms","en_name":"连续天数的最高销售额","cn_name":"连续天数的最高销售额","totalAC":"433K","totalSubmit":"721.4K","likes":749,"dislikes":0,"desc":"<p>某公司每日销售额记于整数数组 <code>sales</code>，请返回所有 <strong>连续</strong> 一或多天销售额总和的最大值。</p>\n\n<p>要求实现时间复杂度为 <code>O(n)</code> 的算法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>sales = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>[4,-1,2,1] 此连续四天的销售总额最高，为 6。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入：</strong>sales = [5,4,-1,7,8]\n<strong>输出：</strong>23\n<strong>解释：</strong>[5,4,-1,7,8] 此连续五天的销售总额最高，为 23。&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;arr.length &lt;= 10^5</code></li>\n\t<li><code>-100 &lt;= arr[i] &lt;= 100</code></li>\n</ul>\n\n<p>注意：本题与主站 53 题相同：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\">https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxSales(vector<int>& sales) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxSales(int[] sales) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxSales(self, sales):\n        \"\"\"\n        :type sales: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxSales(self, sales: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int maxSales(int* sales, int salesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxSales(int[] sales) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} sales\n * @return {number}\n */\nvar maxSales = function(sales) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxSales(sales: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $sales\n     * @return Integer\n     */\n    function maxSales($sales) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSales(_ sales: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxSales(sales: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxSales(List<int> sales) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSales(sales []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} sales\n# @return {Integer}\ndef max_sales(sales)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxSales(sales: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_sales(sales: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-sales sales)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_sales(Sales :: [integer()]) -> integer().\nmax_sales(Sales) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_sales(sales :: [integer]) :: integer\n  def max_sales(sales) do\n    \n  end\nend"}],"testcase":"[-2,1,-3,4,-1,2,1,-5,4]","testable":true,"templateMeta":{"name":"maxSales","params":[{"name":"sales","type":"integer[]"}],"return":{"type":"integer"}}}