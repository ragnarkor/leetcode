{"id":3266,"fid":"2982","name":"找出出现至少三次的最长特殊子字符串 II","slug":"find-longest-special-substring-that-occurs-thrice-ii","link":"https://leetcode.cn/problems/find-longest-special-substring-that-occurs-thrice-ii/description/","percent":48.5732044979375,"level":"Medium","category":"algorithms","en_name":"Find Longest Special Substring That Occurs Thrice II","cn_name":"找出出现至少三次的最长特殊子字符串 II","totalAC":"13.3K","totalSubmit":"25.9K","likes":23,"dislikes":0,"desc":"<p>给你一个仅由小写英文字母组成的字符串 <code>s</code> 。</p>\n\n<p>如果一个字符串仅由单一字符组成，那么它被称为 <strong>特殊 </strong>字符串。例如，字符串 <code>\"abc\"</code> 不是特殊字符串，而字符串 <code>\"ddd\"</code>、<code>\"zz\"</code> 和 <code>\"f\"</code> 是特殊字符串。</p>\n\n<p>返回在 <code>s</code> 中出现 <strong>至少三次 </strong>的<strong> 最长特殊子字符串 </strong>的长度，如果不存在出现至少三次的特殊子字符串，则返回 <code>-1</code> 。</p>\n\n<p><strong>子字符串 </strong>是字符串中的一个连续<strong> 非空 </strong>字符序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aaaa\"\n<strong>输出：</strong>2\n<strong>解释：</strong>出现三次的最长特殊子字符串是 \"aa\" ：子字符串 \"<em><strong>aa</strong></em>aa\"、\"a<em><strong>aa</strong></em>a\" 和 \"aa<em><strong>aa</strong></em>\"。\n可以证明最大长度是 2 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcdef\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在出现至少三次的特殊子字符串。因此返回 -1 。\n</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcaba\"\n<strong>输出：</strong>1\n<strong>解释：</strong>出现三次的最长特殊子字符串是 \"a\" ：子字符串 \"<em><strong>a</strong></em>bcaba\"、\"abc<em><strong>a</strong></em>ba\" 和 \"abcab<em><strong>a</strong></em>\"。\n可以证明最大长度是 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maximumLength(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maximumLength(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maximumLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maximumLength(self, s: str) -> int:"},{"value":"c","text":"C","defaultCode":"int maximumLength(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaximumLength(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLength = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maximumLength(s: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLength($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximumLength(_ s: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maximumLength(s: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maximumLength(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximumLength(s string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef maximum_length(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maximumLength(s: String): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maximum_length(s: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (maximum-length s)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec maximum_length(S :: unicode:unicode_binary()) -> integer().\nmaximum_length(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    \n  end\nend"}],"testcase":"\"aaaa\"","testable":true,"templateMeta":{"name":"maximumLength","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}