{"id":100344,"fid":"LCR 188","name":"买卖芯片的最佳时机","slug":"gu-piao-de-zui-da-li-run-lcof","link":"https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/description/","percent":62.612017041281035,"level":"Medium","category":"algorithms","en_name":"买卖芯片的最佳时机","cn_name":"买卖芯片的最佳时机","totalAC":"290.7K","totalSubmit":"464.5K","likes":382,"dislikes":0,"desc":"<p>数组 <code>prices</code> 记录了某芯片近期的交易价格，其中 <code>prices[i]</code> 表示的 <code>i</code> 天该芯片的价格。你只能选择 <strong>某一天</strong> 买入芯片，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该芯片。请设计一个算法计算并返回你从这笔交易中能获取的最大利润。</p>\n\n<p>如果你不能获取任何利润，返回 0。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>prices = [3, 6, 2, 9, 8, 5]\n<strong>输出：</strong>7\n<strong>解释：</strong>在第 3 天（芯片价格 = 2）买入，在第 4 天（芯片价格 = 9）卖出，最大利润 = 9 - 2 = 7。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>prices = [8, 12, 15, 7, 3, 10]\n<strong>输出：</strong>7\n<strong>解释：</strong>在第 5 天（芯片价格 = 3）买入，在第 6 天（芯片价格 = 10）卖出，最大利润 = 10 - 3 = 7。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>0 &lt;= prices.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10^4</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong>本题与主站 121 题相同：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int bestTiming(vector<int>& prices) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int bestTiming(int[] prices) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def bestTiming(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def bestTiming(self, prices: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int bestTiming(int* prices, int pricesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int BestTiming(int[] prices) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar bestTiming = function(prices) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function bestTiming(prices: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function bestTiming($prices) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func bestTiming(_ prices: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun bestTiming(prices: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int bestTiming(List<int> prices) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func bestTiming(prices []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} prices\n# @return {Integer}\ndef best_timing(prices)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def bestTiming(prices: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn best_timing(prices: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (best-timing prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec best_timing(Prices :: [integer()]) -> integer().\nbest_timing(Prices) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec best_timing(prices :: [integer]) :: integer\n  def best_timing(prices) do\n    \n  end\nend"}],"testcase":"[3,6,2,9,8,5]","testable":true,"templateMeta":{"name":"bestTiming","params":[{"name":"prices","type":"integer[]"}],"return":{"type":"integer"}}}