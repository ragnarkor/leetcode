{"id":100297,"fid":"LCR 137","name":"模糊搜索验证","slug":"zheng-ze-biao-da-shi-pi-pei-lcof","link":"https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/description/","percent":38.188229636951355,"level":"Hard","category":"algorithms","en_name":"模糊搜索验证","cn_name":"模糊搜索验证","totalAC":"129.3K","totalSubmit":"338.9K","likes":572,"dislikes":0,"desc":"<p>请设计一个程序来支持用户在文本编辑器中的模糊搜索功能。用户输入内容中可能使用到如下两种通配符：</p>\n\n<ul>\n\t<li><code>'.'</code> 匹配任意单个字符。</li>\n\t<li><code>'*'</code> 匹配零个或多个前面的那一个元素。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>请返回用户输入内容 <code>input</code> 所有字符是否可以匹配原文字符串 <code>article</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>article = \"aa\", input = \"a\"\n<strong>输出:</strong> false\n<strong>解释:</strong> \"a\" 无法匹配 \"aa\" 整个字符串。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>article = \"aa\", input = \"a*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入: </strong>article = \"ab\", input = \".*\"\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;\".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= article.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= input.length &lt;= 20</code></li>\n\t<li><code>article</code> 只包含从 <code>a-z</code> 的小写字母。</li>\n\t<li><code>input</code> 只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code> 。</li>\n\t<li>保证每次出现字符 <code>*</code> 时，前面都匹配到有效的字符</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>注意：本题与主站 10&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\">https://leetcode-cn.com/problems/regular-expression-matching/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool articleMatch(string s, string p) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean articleMatch(String s, String p) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def articleMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def articleMatch(self, s: str, p: str) -> bool:"},{"value":"c","text":"C","defaultCode":"bool articleMatch(char* s, char* p) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ArticleMatch(string s, string p) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar articleMatch = function(s, p) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function articleMatch(s: string, p: string): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function articleMatch($s, $p) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func articleMatch(_ s: String, _ p: String) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun articleMatch(s: String, p: String): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool articleMatch(String s, String p) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func articleMatch(s string, p string) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef article_match(s, p)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def articleMatch(s: String, p: String): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn article_match(s: String, p: String) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (article-match s p)\n  (-> string? string? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec article_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\narticle_match(S, P) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec article_match(s :: String.t, p :: String.t) :: boolean\n  def article_match(s, p) do\n    \n  end\nend"}],"testcase":"\"aa\"\n\"a\"","testable":true,"templateMeta":{"name":"articleMatch","params":[{"name":"s","type":"string"},{"name":"p","type":"string"}],"return":{"type":"boolean"}}}