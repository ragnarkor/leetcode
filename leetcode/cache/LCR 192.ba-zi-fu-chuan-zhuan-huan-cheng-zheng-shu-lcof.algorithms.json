{"id":100340,"fid":"LCR 192","name":"把字符串转换成整数 (atoi)","slug":"ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof","link":"https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/description/","percent":27.60650680580681,"level":"Medium","category":"algorithms","en_name":"把字符串转换成整数 (atoi)","cn_name":"把字符串转换成整数 (atoi)","totalAC":"156.2K","totalSubmit":"568.1K","likes":283,"dislikes":0,"desc":"<p>请你来实现一个&nbsp;<code>myAtoi(string s)</code>&nbsp;函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p>\n\n<p>函数&nbsp;<code>myAtoi(string s)</code> 的算法如下：</p>\n\n<ol>\n\t<li>读入字符串并丢弃无用的前导空格</li>\n\t<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>\n\t<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>\n\t<li>将前面步骤读入的这些数字转换为整数（即，\"123\" -&gt; 123， \"0032\" -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li>\n\t<li>如果整数数超过 32 位有符号整数范围 <code>[−2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>− 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2<sup>31</sup></code> 的整数应该被固定为 <code>−2<sup>31</sup></code> ，大于 <code>2<sup>31&nbsp;</sup>− 1</code> 的整数应该被固定为 <code>2<sup>31&nbsp;</sup>− 1</code> 。</li>\n\t<li>返回整数作为最终结果。</li>\n</ol>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>本题中的空白字符只包括空格字符 <code>' '</code> 。</li>\n\t<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"42\"\n<strong>输出：</strong>42\n<strong>解释：</strong>加粗的字符串为已经读入的字符，插入符号是当前读取的字符。\n第 1 步：\"42\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"42\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）\n         ^\n第 3 步：\"<u>42</u>\"（读入 \"42\"）\n           ^\n解析得到整数 42 。\n由于 \"42\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 42 。</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"   -42\"\n<strong>输出：</strong>-42\n<strong>解释：</strong>\n第 1 步：\"<u><strong>   </strong></u>-42\"（读入前导空格，但忽视掉）\n            ^\n第 2 步：\"   <u><strong>-</strong></u>42\"（读入 '-' 字符，所以结果应该是负数）\n             ^\n第 3 步：\"   <u><strong>-42</strong></u>\"（读入 \"42\"）\n               ^\n解析得到整数 -42 。\n由于 \"-42\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 -42 。\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"4193 with words\"\n<strong>输出：</strong>4193\n<strong>解释：</strong>\n第 1 步：\"4193 with words\"（当前没有读入字符，因为没有前导空格）\n         ^\n第 2 步：\"4193 with words\"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）\n         ^\n第 3 步：\"<u>4193</u> with words\"（读入 \"4193\"；由于下一个字符不是一个数字，所以读入停止）\n             ^\n解析得到整数 4193 。\n由于 \"4193\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 4193 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>' '</code>、<code>'+'</code>、<code>'-'</code> 和 <code>'.'</code> 组成</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int myAtoi(string str) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int myAtoi(String str) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def myAtoi(self, str: str) -> int:"},{"value":"c","text":"C","defaultCode":"int myAtoi(char* str) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MyAtoi(string str) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function myAtoi(str: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $str\n     * @return Integer\n     */\n    function myAtoi($str) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func myAtoi(_ str: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun myAtoi(str: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int myAtoi(String str) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func myAtoi(str string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} str\n# @return {Integer}\ndef my_atoi(str)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def myAtoi(str: String): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn my_atoi(str: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (my-atoi str)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_atoi(Str :: unicode:unicode_binary()) -> integer().\nmy_atoi(Str) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec my_atoi(str :: String.t) :: integer\n  def my_atoi(str) do\n    \n  end\nend"}],"testcase":"\"42\"","testable":true,"templateMeta":{"name":"myAtoi","params":[{"name":"str","type":"string"}],"return":{"type":"integer"}}}