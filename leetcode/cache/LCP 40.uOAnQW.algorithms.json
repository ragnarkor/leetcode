{"id":1000368,"fid":"LCP 40","name":"心算挑战","slug":"uOAnQW","link":"https://leetcode.cn/problems/uOAnQW/description/","percent":31.829980532121997,"level":"Easy","category":"algorithms","en_name":"心算挑战","cn_name":"心算挑战","totalAC":"21.7K","totalSubmit":"56.4K","likes":106,"dislikes":0,"desc":"「力扣挑战赛」心算项目的挑战比赛中，要求选手从 `N` 张卡牌中选出 `cnt` 张卡牌，若这 `cnt` 张卡牌数字总和为偶数，则选手成绩「有效」且得分为 `cnt` 张卡牌数字总和。\n给定数组 `cards` 和 `cnt`，其中 `cards[i]` 表示第 `i` 张卡牌上的数字。 请帮参赛选手计算最大的有效得分。若不存在获取有效得分的卡牌方案，则返回 0。\n\n**示例 1：**\n>输入：`cards = [1,2,8,9], cnt = 3`\n>\n>输出：`18`\n>\n>解释：选择数字为 1、8、9 的这三张卡牌，此时可获得最大的有效得分 1+8+9=18。\n\n**示例 2：**\n>输入：`cards = [3,3,1], cnt = 1`\n>\n>输出：`0`\n>\n>解释：不存在获取有效得分的卡牌方案。\n\n**提示：**\n- `1 <= cnt <= cards.length <= 10^5`\n- `1 <= cards[i] <= 1000`\n\n\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxmiumScore(vector<int>& cards, int cnt) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxmiumScore(int[] cards, int cnt) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxmiumScore(self, cards, cnt):\n        \"\"\"\n        :type cards: List[int]\n        :type cnt: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxmiumScore(self, cards: List[int], cnt: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint maxmiumScore(int* cards, int cardsSize, int cnt){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxmiumScore(int[] cards, int cnt) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} cards\n * @param {number} cnt\n * @return {number}\n */\nvar maxmiumScore = function(cards, cnt) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxmiumScore(cards: number[], cnt: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $cards\n     * @param Integer $cnt\n     * @return Integer\n     */\n    function maxmiumScore($cards, $cnt) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxmiumScore(_ cards: [Int], _ cnt: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxmiumScore(cards: IntArray, cnt: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxmiumScore(List<int> cards, int cnt) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxmiumScore(cards []int, cnt int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} cards\n# @param {Integer} cnt\n# @return {Integer}\ndef maxmium_score(cards, cnt)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxmiumScore(cards: Array[Int], cnt: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maxmium_score(cards: Vec<i32>, cnt: i32) -> i32 {\n\n    }\n}"}],"testcase":"[1,2,8,9]\n3","testable":true,"templateMeta":{"name":"maxmiumScore","params":[{"name":"cards","type":"integer[]"},{"name":"cnt","type":"integer"}],"return":{"type":"integer"}}}