{"id":100328,"fid":"LCR 181","name":"字符串中的单词反转","slug":"fan-zhuan-dan-ci-shun-xu-lcof","link":"https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/description/","percent":44.835694768797744,"level":"Easy","category":"algorithms","en_name":"字符串中的单词反转","cn_name":"字符串中的单词反转","totalAC":"280.4K","totalSubmit":"624.7K","likes":330,"dislikes":0,"desc":"<p>你在与一位习惯从右往左阅读的朋友发消息，他发出的文字顺序都与正常相反但单词内容正确，为了和他顺利交流你决定写一个转换程序，把他所发的消息 <code>message</code> 转换为正常语序。</p>\n\n<p>注意：输入字符串 <code>message</code> 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> message = \"<code>the sky is blue</code>\"\n<strong>输出:&nbsp;</strong>\"<code>blue is sky the</code>\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> message = \" &nbsp;hello world! &nbsp;\"\n<strong>输出:&nbsp;</strong>\"world! hello\"\n<strong>解释: </strong>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入:</strong> message = \"a good &nbsp; example\"\n<strong>输出:&nbsp;</strong>\"example good a\"\n<strong>解释: </strong>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= message.length &lt;= 10^4</code></li>\n\t<li><code>message</code> 中包含英文大小写字母、空格和数字</li>\n\t<li><code>message</code> 中至少有一个单词</li>\n\t<li>&nbsp;</li>\n</ul>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string reverseMessage(string message) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String reverseMessage(String message) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def reverseMessage(self, message):\n        \"\"\"\n        :type message: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reverseMessage(self, message: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* reverseMessage(char* message) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string ReverseMessage(string message) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} message\n * @return {string}\n */\nvar reverseMessage = function(message) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function reverseMessage(message: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $message\n     * @return String\n     */\n    function reverseMessage($message) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reverseMessage(_ message: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun reverseMessage(message: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String reverseMessage(String message) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func reverseMessage(message string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} message\n# @return {String}\ndef reverse_message(message)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def reverseMessage(message: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn reverse_message(message: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (reverse-message message)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec reverse_message(Message :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreverse_message(Message) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec reverse_message(message :: String.t) :: String.t\n  def reverse_message(message) do\n    \n  end\nend"}],"testcase":"\"the sky is blue\"","testable":true,"templateMeta":{"name":"reverseMessage","params":[{"name":"message","type":"string"}],"return":{"type":"string"}}}