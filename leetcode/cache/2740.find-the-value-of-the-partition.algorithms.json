{"id":2845,"fid":"2740","name":"找出分区值","slug":"find-the-value-of-the-partition","link":"https://leetcode.cn/problems/find-the-value-of-the-partition/description/","percent":73.30503863314833,"level":"Medium","category":"algorithms","en_name":"Find the Value of the Partition","cn_name":"找出分区值","totalAC":"9.7K","totalSubmit":"12.7K","likes":18,"dislikes":0,"desc":"<p>给你一个 <strong>正</strong> 整数数组 <code>nums</code> 。</p>\n\n<p>将 <code>nums</code> 分成两个数组：<code>nums1</code> 和 <code>nums2</code> ，并满足下述条件：</p>\n\n<ul>\n\t<li>数组 <code>nums</code> 中的每个元素都属于数组 <code>nums1</code> 或数组 <code>nums2</code> 。</li>\n\t<li>两个数组都 <strong>非空</strong> 。</li>\n\t<li>分区值 <strong>最小</strong> 。</li>\n</ul>\n\n<p>分区值的计算方法是 <code>|max(nums1) - min(nums2)|</code> 。</p>\n\n<p>其中，<code>max(nums1)</code> 表示数组 <code>nums1</code> 中的最大元素，<code>min(nums2)</code> 表示数组 <code>nums2</code> 中的最小元素。</p>\n\n<p>返回表示分区值的整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,2,4]\n<strong>输出：</strong>1\n<strong>解释：</strong>可以将数组 nums 分成 nums1 = [1,2] 和 nums2 = [3,4] 。\n- 数组 nums1 的最大值等于 2 。\n- 数组 nums2 的最小值等于 3 。\n分区值等于 |2 - 3| = 1 。\n可以证明 1 是所有分区方案的最小值。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [100,1,10]\n<strong>输出：</strong>9\n<strong>解释：</strong>可以将数组 nums 分成 nums1 = [10] 和 nums2 = [100,1] 。 \n- 数组 nums1 的最大值等于 10 。 \n- 数组 nums2 的最小值等于 1 。 \n分区值等于 |10 - 1| = 9 。 \n可以证明 9 是所有分区方案的最小值。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findValueOfPartition(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findValueOfPartition(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findValueOfPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int findValueOfPartition(int* nums, int numsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindValueOfPartition(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findValueOfPartition = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findValueOfPartition(nums: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findValueOfPartition($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findValueOfPartition(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findValueOfPartition(nums: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findValueOfPartition(List<int> nums) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findValueOfPartition(nums []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_value_of_partition(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findValueOfPartition(nums: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_value_of_partition(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-value-of-partition nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_value_of_partition(Nums :: [integer()]) -> integer().\nfind_value_of_partition(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_value_of_partition(nums :: [integer]) :: integer\n  def find_value_of_partition(nums) do\n\n  end\nend"}],"testcase":"[1,3,2,4]","testable":true,"templateMeta":{"name":"findValueOfPartition","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}