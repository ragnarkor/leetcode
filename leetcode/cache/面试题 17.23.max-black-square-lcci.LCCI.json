{"id":1000045,"fid":"面试题 17.23","name":"最大黑方阵","slug":"max-black-square-lcci","link":"https://leetcode.cn/problems/max-black-square-lcci/description/","percent":37.97238071611676,"level":"Medium","category":"LCCI","en_name":"Max Black Square LCCI","cn_name":"最大黑方阵","totalAC":"9.2K","totalSubmit":"24.3K","likes":56,"dislikes":0,"desc":"<p>给定一个方阵，其中每个单元(像素)非黑即白。设计一个算法，找出 4 条边皆为黑色像素的最大子方阵。</p>\n\n<p>返回一个数组 <code>[r, c, size]</code> ，其中&nbsp;<code>r</code>,&nbsp;<code>c</code>&nbsp;分别代表子方阵左上角的行号和列号，<code>size</code> 是子方阵的边长。若有多个满足条件的子方阵，返回 <code>r</code> 最小的，若 <code>r</code> 相同，返回 <code>c</code> 最小的子方阵。若无满足条件的子方阵，返回空数组。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:\n</strong>[\n&nbsp;  [1,0,1],\n&nbsp;  [<strong>0,0</strong>,1],\n&nbsp;  [<strong>0,0</strong>,1]\n]\n<strong>输出: </strong>[1,0,2]\n<strong>解释: </strong>输入中 0 代表黑色，1 代表白色，标粗的元素即为满足条件的最大子方阵\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:\n</strong>[\n&nbsp;  [<strong>0</strong>,1,1],\n&nbsp;  [1,0,1],\n&nbsp;  [1,1,0]\n]\n<strong>输出: </strong>[0,0,1]\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>matrix.length == matrix[0].length &lt;= 200</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findSquare(vector<vector<int>>& matrix) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findSquare(int[][] matrix) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findSquare(self, matrix: List[List[int]]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSquare(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\n\n}\n"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FindSquare(int[][] matrix) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar findSquare = function(matrix) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findSquare(matrix: number[][]): number[] {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function findSquare($matrix) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findSquare(_ matrix: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findSquare(matrix: Array<IntArray>): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findSquare(List<List<int>> matrix) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findSquare(matrix [][]int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef find_square(matrix)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findSquare(matrix: Array[Array[Int]]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_square(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-square matrix)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_square(Matrix :: [[integer()]]) -> [integer()].\nfind_square(Matrix) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_square(matrix :: [[integer]]) :: [integer]\n  def find_square(matrix) do\n\n  end\nend"}],"testcase":"[[1,0,1],[0,0,1],[0,0,1]]","testable":true,"templateMeta":{"name":"findSquare","params":[{"name":"matrix","type":"integer[][]"}],"return":{"type":"integer[]"}}}