{"id":232,"fid":"232","name":"用栈实现队列","slug":"implement-queue-using-stacks","link":"https://leetcode.cn/problems/implement-queue-using-stacks/description/","percent":68.13470854907887,"level":"Easy","category":"algorithms","en_name":"Implement Queue using Stacks","cn_name":"用栈实现队列","totalAC":"490.6K","totalSubmit":"720K","likes":1143,"dislikes":0,"desc":"<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>\n\n<p>实现 <code>MyQueue</code> 类：</p>\n\n<ul>\n\t<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>\n\t<li><code>int pop()</code> 从队列的开头移除并返回元素</li>\n\t<li><code>int peek()</code> 返回队列开头的元素</li>\n\t<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>\n</ul>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>\n\t<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n<strong>输出：</strong>\n[null, null, null, 1, 1, false]\n\n<strong>解释：</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<ul>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li>\n\t<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyQueue {\npublic:\n    MyQueue() {\n\n    }\n    \n    void push(int x) {\n\n    }\n    \n    int pop() {\n\n    }\n    \n    int peek() {\n\n    }\n    \n    bool empty() {\n\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */"},{"value":"java","text":"Java","defaultCode":"class MyQueue {\n\n    public MyQueue() {\n\n    }\n    \n    public void push(int x) {\n\n    }\n    \n    public int pop() {\n\n    }\n    \n    public int peek() {\n\n    }\n    \n    public boolean empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */"},{"value":"python","text":"Python","defaultCode":"class MyQueue(object):\n\n    def __init__(self):\n\n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n\n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def peek(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def empty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"},{"value":"python3","text":"Python3","defaultCode":"class MyQueue:\n\n    def __init__(self):\n\n\n    def push(self, x: int) -> None:\n\n\n    def pop(self) -> int:\n\n\n    def peek(self) -> int:\n\n\n    def empty(self) -> bool:\n\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MyQueue;\n\n\nMyQueue* myQueueCreate() {\n    \n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n    \n}\n\nint myQueuePop(MyQueue* obj) {\n    \n}\n\nint myQueuePeek(MyQueue* obj) {\n    \n}\n\nbool myQueueEmpty(MyQueue* obj) {\n    \n}\n\nvoid myQueueFree(MyQueue* obj) {\n    \n}\n\n/**\n * Your MyQueue struct will be instantiated and called as such:\n * MyQueue* obj = myQueueCreate();\n * myQueuePush(obj, x);\n \n * int param_2 = myQueuePop(obj);\n \n * int param_3 = myQueuePeek(obj);\n \n * bool param_4 = myQueueEmpty(obj);\n \n * myQueueFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class MyQueue {\n\n    public MyQueue() {\n\n    }\n    \n    public void Push(int x) {\n\n    }\n    \n    public int Pop() {\n\n    }\n    \n    public int Peek() {\n\n    }\n    \n    public bool Empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Peek();\n * bool param_4 = obj.Empty();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyQueue = function() {\n\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MyQueue {\n    constructor() {\n        \n    }\n\n    push(x: number): void {\n        \n    }\n\n    pop(): number {\n        \n    }\n\n    peek(): number {\n        \n    }\n\n    empty(): boolean {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"},{"value":"php","text":"PHP","defaultCode":"class MyQueue {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function pop() {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function peek() {\n\n    }\n\n    /**\n     * @return Boolean\n     */\n    function empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * $obj = MyQueue();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->peek();\n * $ret_4 = $obj->empty();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyQueue {\n\n    init() {\n\n    }\n    \n    func push(_ x: Int) {\n\n    }\n    \n    func pop() -> Int {\n\n    }\n    \n    func peek() -> Int {\n\n    }\n    \n    func empty() -> Bool {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.peek()\n * let ret_4: Bool = obj.empty()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyQueue() {\n\n    fun push(x: Int) {\n\n    }\n\n    fun pop(): Int {\n\n    }\n\n    fun peek(): Int {\n\n    }\n\n    fun empty(): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"},{"value":"dart","text":"Dart","defaultCode":"class MyQueue {\n\n  MyQueue() {\n    \n  }\n  \n  void push(int x) {\n    \n  }\n  \n  int pop() {\n    \n  }\n  \n  int peek() {\n    \n  }\n  \n  bool empty() {\n    \n  }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = MyQueue();\n * obj.push(x);\n * int param2 = obj.pop();\n * int param3 = obj.peek();\n * bool param4 = obj.empty();\n */"},{"value":"golang","text":"Go","defaultCode":"type MyQueue struct {\n\n}\n\n\nfunc Constructor() MyQueue {\n\n}\n\n\nfunc (this *MyQueue) Push(x int)  {\n\n}\n\n\nfunc (this *MyQueue) Pop() int {\n\n}\n\n\nfunc (this *MyQueue) Peek() int {\n\n}\n\n\nfunc (this *MyQueue) Empty() bool {\n\n}\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Peek();\n * param_4 := obj.Empty();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyQueue\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def peek()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def empty()\n        \n    end\n\n\nend\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"},{"value":"scala","text":"Scala","defaultCode":"class MyQueue() {\n\n    def push(x: Int): Unit = {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n    def peek(): Int = {\n        \n    }\n\n    def empty(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * val obj = new MyQueue()\n * obj.push(x)\n * val param_2 = obj.pop()\n * val param_3 = obj.peek()\n * val param_4 = obj.empty()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MyQueue {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyQueue {\n\n    fn new() -> Self {\n\n    }\n    \n    fn push(&self, x: i32) {\n\n    }\n    \n    fn pop(&self) -> i32 {\n\n    }\n    \n    fn peek(&self) -> i32 {\n\n    }\n    \n    fn empty(&self) -> bool {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.peek();\n * let ret_4: bool = obj.empty();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define my-queue%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push x)\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n      )\n    ; peek : -> exact-integer?\n    (define/public (peek)\n      )\n    ; empty : -> boolean?\n    (define/public (empty)\n      )))\n\n;; Your my-queue% object will be instantiated and called as such:\n;; (define obj (new my-queue%))\n;; (send obj push x)\n;; (define param_2 (send obj pop))\n;; (define param_3 (send obj peek))\n;; (define param_4 (send obj empty))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_queue_init_() -> any().\nmy_queue_init_() ->\n  .\n\n-spec my_queue_push(X :: integer()) -> any().\nmy_queue_push(X) ->\n  .\n\n-spec my_queue_pop() -> integer().\nmy_queue_pop() ->\n  .\n\n-spec my_queue_peek() -> integer().\nmy_queue_peek() ->\n  .\n\n-spec my_queue_empty() -> boolean().\nmy_queue_empty() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_queue_init_(),\n%% my_queue_push(X),\n%% Param_2 = my_queue_pop(),\n%% Param_3 = my_queue_peek(),\n%% Param_4 = my_queue_empty(),\n\n%% my_queue_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MyQueue do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec push(x :: integer) :: any\n  def push(x) do\n    \n  end\n\n  @spec pop() :: integer\n  def pop() do\n    \n  end\n\n  @spec peek() :: integer\n  def peek() do\n    \n  end\n\n  @spec empty() :: boolean\n  def empty() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyQueue.init_()\n# MyQueue.push(x)\n# param_2 = MyQueue.pop()\n# param_3 = MyQueue.peek()\n# param_4 = MyQueue.empty()\n\n# MyQueue.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]","testable":true,"templateMeta":{"classname":"MyQueue","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"x"}],"return":{"type":"void"},"name":"push"},{"params":[],"return":{"type":"integer"},"name":"pop"},{"params":[],"return":{"type":"integer"},"name":"peek"},{"params":[],"return":{"type":"boolean"},"name":"empty"}],"return":{"type":"boolean"},"systemdesign":true}}