{"id":100306,"fid":"LCR 148","name":"验证图书取出顺序","slug":"zhan-de-ya-ru-dan-chu-xu-lie-lcof","link":"https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/description/","percent":61.06600014564975,"level":"Medium","category":"algorithms","en_name":"验证图书取出顺序","cn_name":"验证图书取出顺序","totalAC":"236.6K","totalSubmit":"387.2K","likes":489,"dislikes":0,"desc":"<p>现在图书馆有一堆图书需要放入书架，并且图书馆的书架是一种特殊的数据结构，只能按照 <strong>一定</strong> 的顺序 <strong>放入</strong> 和 <strong>拿取</strong> 书籍。</p>\n\n<p>给定一个表示图书放入顺序的整数序列 <code>putIn</code>，请判断序列 <code>takeOut</code> 是否为按照正确的顺序拿取书籍的操作序列。你可以假设放入书架的所有书籍编号都不相同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>putIn = [6,7,8,9,10,11], takeOut = [9,11,10,8,7,6]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以按以下操作放入并拿取书籍：\npush(6), push(7), push(8), push(9), pop() -&gt; 9,\npush(10), push(11),pop() -&gt; 11,pop() -&gt; 10, pop() -&gt; 8, pop() -&gt; 7, pop() -&gt; 6\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>putIn = [6,7,8,9,10,11], takeOut = [11,9,8,10,6,7]\n<strong>输出：</strong>false\n<strong>解释：</strong>6 不能在 7 之前取出。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= putIn.length == takeOut.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= putIn[i], takeOut &lt; 1000</code></li>\n\t<li><code>putIn</code> 是 <code>takeOut</code> 的排列。</li>\n</ul>\n\n<p>注意：本题与主站 946 题相同：<a href=\"https://leetcode-cn.com/problems/validate-stack-sequences/\">https://leetcode-cn.com/problems/validate-stack-sequences/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool validateBookSequences(vector<int>& putIn, vector<int>& takeOut) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean validateBookSequences(int[] putIn, int[] takeOut) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def validateBookSequences(self, putIn, takeOut):\n        \"\"\"\n        :type putIn: List[int]\n        :type takeOut: List[int]\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def validateBookSequences(self, putIn: List[int], takeOut: List[int]) -> bool:"},{"value":"c","text":"C","defaultCode":"bool validateBookSequences(int* putIn, int putInSize, int* takeOut, int takeOutSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ValidateBookSequences(int[] putIn, int[] takeOut) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} putIn\n * @param {number[]} takeOut\n * @return {boolean}\n */\nvar validateBookSequences = function(putIn, takeOut) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function validateBookSequences(putIn: number[], takeOut: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $putIn\n     * @param Integer[] $takeOut\n     * @return Boolean\n     */\n    function validateBookSequences($putIn, $takeOut) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validateBookSequences(_ putIn: [Int], _ takeOut: [Int]) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun validateBookSequences(putIn: IntArray, takeOut: IntArray): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool validateBookSequences(List<int> putIn, List<int> takeOut) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func validateBookSequences(putIn []int, takeOut []int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} put_in\n# @param {Integer[]} take_out\n# @return {Boolean}\ndef validate_book_sequences(put_in, take_out)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def validateBookSequences(putIn: Array[Int], takeOut: Array[Int]): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn validate_book_sequences(put_in: Vec<i32>, take_out: Vec<i32>) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (validate-book-sequences putIn takeOut)\n  (-> (listof exact-integer?) (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec validate_book_sequences(PutIn :: [integer()], TakeOut :: [integer()]) -> boolean().\nvalidate_book_sequences(PutIn, TakeOut) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec validate_book_sequences(put_in :: [integer], take_out :: [integer]) :: boolean\n  def validate_book_sequences(put_in, take_out) do\n    \n  end\nend"}],"testcase":"[6,7,8,9,10,11]\n[9,11,10,8,7,6]","testable":true,"templateMeta":{"name":"validateBookSequences","params":[{"name":"putIn","type":"integer[]"},{"name":"takeOut","type":"integer[]"}],"return":{"type":"boolean"}}}