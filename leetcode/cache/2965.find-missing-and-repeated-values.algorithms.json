{"id":3227,"fid":"2965","name":"找出缺失和重复的数字","slug":"find-missing-and-repeated-values","link":"https://leetcode.cn/problems/find-missing-and-repeated-values/description/","percent":79.90357777213904,"level":"Easy","category":"algorithms","en_name":"Find Missing and Repeated Values","cn_name":"找出缺失和重复的数字","totalAC":"9.2K","totalSubmit":"11.2K","likes":7,"dislikes":0,"desc":"<p>给你一个下标从<strong> 0 </strong>开始的二维整数矩阵 <code><font face=\"monospace\">grid</font></code>，大小为 <code>n * n</code> ，其中的值在 <code>[1, n<sup>2</sup>]</code> 范围内。除了 <code>a</code> 出现 <strong>两次</strong>，<code>b</code> <strong>缺失</strong> 之外，每个整数都<strong> 恰好出现一次</strong> 。</p>\n\n<p>任务是找出重复的数字<code>a</code> 和缺失的数字 <code>b</code> 。</p>\n\n<p>返回一个下标从 0 开始、长度为 <code>2</code> 的整数数组 <code>ans</code> ，其中 <code>ans[0]</code> 等于 <code>a</code> ，<code>ans[1]</code> 等于 <code>b</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[1,3],[2,2]]\n<strong>输出：</strong>[2,4]\n<strong>解释：</strong>数字 2 重复，数字 4 缺失，所以答案是 [2,4] 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[9,1,7],[8,9,2],[3,4,6]]\n<strong>输出：</strong>[9,5]\n<strong>解释：</strong>数字 9 重复，数字 5 缺失，所以答案是 [9,5] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == grid.length == grid[i].length &lt;= 50</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= n * n</code></li>\n\t<li>对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，恰好存在一个 <code>x</code> 与矩阵中的任何成员都不相等。</li>\n\t<li>对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，恰好存在一个 <code>x</code> 与矩阵中的两个成员相等。</li>\n\t<li>除上述的两个之外，对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，都恰好存在一对 <code>i, j</code> 满足 <code>0 &lt;= i, j &lt;= n - 1</code> 且 <code>grid[i][j] == x</code> 。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findMissingAndRepeatedValues(int[][] grid) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMissingAndRepeatedValues(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMissingAndRepeatedValues(int** grid, int gridSize, int* gridColSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FindMissingAndRepeatedValues(int[][] grid) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar findMissingAndRepeatedValues = function(grid) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findMissingAndRepeatedValues(grid: number[][]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function findMissingAndRepeatedValues($grid) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMissingAndRepeatedValues(_ grid: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMissingAndRepeatedValues(grid: Array<IntArray>): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findMissingAndRepeatedValues(List<List<int>> grid) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMissingAndRepeatedValues(grid [][]int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer[]}\ndef find_missing_and_repeated_values(grid)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMissingAndRepeatedValues(grid: Array[Array[Int]]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_missing_and_repeated_values(grid: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-missing-and-repeated-values grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_missing_and_repeated_values(Grid :: [[integer()]]) -> [integer()].\nfind_missing_and_repeated_values(Grid) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_missing_and_repeated_values(grid :: [[integer]]) :: [integer]\n  def find_missing_and_repeated_values(grid) do\n    \n  end\nend"}],"testcase":"[[1,3],[2,2]]","testable":true,"templateMeta":{"name":"findMissingAndRepeatedValues","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer[]"}}}