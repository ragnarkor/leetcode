{"id":100275,"fid":"LCR 120","name":"寻找文件副本","slug":"shu-zu-zhong-zhong-fu-de-shu-zi-lcof","link":"https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/description/","percent":66.90145825615465,"level":"Easy","category":"algorithms","en_name":"寻找文件副本","cn_name":"寻找文件副本","totalAC":"794.7K","totalSubmit":"1.2M","likes":1237,"dislikes":0,"desc":"<p>设备中存有 <code>n</code> 个文件，文件 <code>id</code> 记于数组 <code>documents</code>。若文件 <code>id</code> 相同，则定义为该文件存在副本。请返回任一存在副本的文件 <code>id</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>documents = [2, 5, 3, 0, 5, 0]\n<strong>输出：</strong>0 或 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 ≤ documents[i] ≤ n-1</code></li>\n\t<li><code>2 &lt;= n &lt;= 100000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findRepeatDocument(vector<int>& documents) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findRepeatDocument(int[] documents) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findRepeatDocument(self, documents):\n        \"\"\"\n        :type documents: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findRepeatDocument(self, documents: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int findRepeatDocument(int* documents, int documentsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindRepeatDocument(int[] documents) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} documents\n * @return {number}\n */\nvar findRepeatDocument = function(documents) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findRepeatDocument(documents: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $documents\n     * @return Integer\n     */\n    function findRepeatDocument($documents) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findRepeatDocument(_ documents: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findRepeatDocument(documents: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findRepeatDocument(List<int> documents) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findRepeatDocument(documents []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} documents\n# @return {Integer}\ndef find_repeat_document(documents)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findRepeatDocument(documents: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_repeat_document(documents: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-repeat-document documents)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_repeat_document(Documents :: [integer()]) -> integer().\nfind_repeat_document(Documents) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_repeat_document(documents :: [integer]) :: integer\n  def find_repeat_document(documents) do\n    \n  end\nend"}],"testcase":"[2, 5, 3, 0, 5, 0]","testable":true,"templateMeta":{"name":"findRepeatDocument","params":[{"name":"documents","type":"integer[]"}],"return":{"type":"integer"}}}