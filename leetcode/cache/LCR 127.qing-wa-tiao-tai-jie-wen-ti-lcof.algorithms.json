{"id":100277,"fid":"LCR 127","name":"跳跃训练","slug":"qing-wa-tiao-tai-jie-wen-ti-lcof","link":"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/description/","percent":45.37734647216194,"level":"Easy","category":"algorithms","en_name":"跳跃训练","cn_name":"跳跃训练","totalAC":"406.2K","totalSubmit":"895.2K","likes":420,"dislikes":0,"desc":"<p>今天的有氧运动训练内容是在一个长条形的平台上跳跃。平台有 <code>num</code> 个小格子，每次可以选择跳 <strong>一个格子</strong> 或者 <strong>两个格子</strong>。请返回在训练过程中，学员们共有多少种不同的跳跃方式。</p>\n\n<p>结果可能过大，因此结果需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 5\n<strong>输出：</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 100</code></li>\n</ul>\n\n<p>注意：本题与主站 70 题相同：<a href=\"https://leetcode-cn.com/problems/climbing-stairs/\">https://leetcode-cn.com/problems/climbing-stairs/</a></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int trainWays(int num) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int trainWays(int num) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def trainWays(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def trainWays(self, num: int) -> int:"},{"value":"c","text":"C","defaultCode":"int trainWays(int num) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TrainWays(int num) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {number}\n */\nvar trainWays = function(num) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function trainWays(num: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function trainWays($num) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func trainWays(_ num: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun trainWays(num: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int trainWays(int num) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func trainWays(num int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {Integer}\ndef train_ways(num)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def trainWays(num: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn train_ways(num: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (train-ways num)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec train_ways(Num :: integer()) -> integer().\ntrain_ways(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec train_ways(num :: integer) :: integer\n  def train_ways(num) do\n    \n  end\nend"}],"testcase":"2","testable":true,"templateMeta":{"name":"trainWays","params":[{"name":"num","type":"integer"}],"return":{"type":"integer"}}}