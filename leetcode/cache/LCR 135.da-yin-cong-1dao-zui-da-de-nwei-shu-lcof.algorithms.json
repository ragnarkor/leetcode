{"id":100296,"fid":"LCR 135","name":"报数","slug":"da-yin-cong-1dao-zui-da-de-nwei-shu-lcof","link":"https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/description/","percent":77.58609997688592,"level":"Easy","category":"algorithms","en_name":"报数","cn_name":"报数","totalAC":"276.8K","totalSubmit":"356.6K","likes":311,"dislikes":0,"desc":"<p>实现一个十进制数字报数程序，请按照数字从小到大的顺序返回一个整数数列，该数列从数字 <code>1</code> 开始，到最大的正整数 <code>cnt</code> 位数字结束。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>cnt = 2\n<strong>输出：</strong>[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]</pre>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> countNumbers(int cnt) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] countNumbers(int cnt) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countNumbers(self, cnt):\n        \"\"\"\n        :type cnt: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countNumbers(self, cnt: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countNumbers(int cnt, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] CountNumbers(int cnt) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} cnt\n * @return {number[]}\n */\nvar countNumbers = function(cnt) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countNumbers(cnt: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $cnt\n     * @return Integer[]\n     */\n    function countNumbers($cnt) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countNumbers(_ cnt: Int) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countNumbers(cnt: Int): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> countNumbers(int cnt) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func countNumbers(cnt int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} cnt\n# @return {Integer[]}\ndef count_numbers(cnt)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countNumbers(cnt: Int): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_numbers(cnt: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-numbers cnt)\n  (-> exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_numbers(Cnt :: integer()) -> [integer()].\ncount_numbers(Cnt) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_numbers(cnt :: integer) :: [integer]\n  def count_numbers(cnt) do\n    \n  end\nend"}],"testcase":"2","testable":true,"templateMeta":{"name":"countNumbers","params":[{"name":"cnt","type":"integer"}],"return":{"type":"integer[]"}}}