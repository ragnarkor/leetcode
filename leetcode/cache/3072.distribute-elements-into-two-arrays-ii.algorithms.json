{"id":3350,"fid":"3072","name":"将元素分配到两个数组中 II","slug":"distribute-elements-into-two-arrays-ii","link":"https://leetcode.cn/problems/distribute-elements-into-two-arrays-ii/description/","percent":38.270634475014035,"level":"Hard","category":"algorithms","en_name":"Distribute Elements Into Two Arrays II","cn_name":"将元素分配到两个数组中 II","totalAC":"4.7K","totalSubmit":"10.6K","likes":18,"dislikes":0,"desc":"<p>给你一个下标从 <strong>1</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p>\n\n<p>现定义函数 <code>greaterCount</code> ，使得 <code>greaterCount(arr, val)</code> 返回数组 <code>arr</code> 中<strong> 严格大于</strong> <code>val</code> 的元素数量。</p>\n\n<p>你需要使用 <code>n</code> 次操作，将 <code>nums</code> 的所有元素分配到两个数组 <code>arr1</code> 和 <code>arr2</code> 中。在第一次操作中，将 <code>nums[1]</code> 追加到 <code>arr1</code> 。在第二次操作中，将 <code>nums[2]</code> 追加到 <code>arr2</code> 。之后，在第 <code>i</code> 次操作中：</p>\n\n<ul>\n\t<li>如果 <code>greaterCount(arr1, nums[i]) &gt; greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到 <code>arr1</code> 。</li>\n\t<li>如果 <code>greaterCount(arr1, nums[i]) &lt; greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到 <code>arr2</code> 。</li>\n\t<li>如果 <code>greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i])</code> ，将 <code>nums[i]</code> 追加到元素数量较少的数组中。</li>\n\t<li>如果仍然相等，那么将 <code>nums[i]</code> 追加到 <code>arr1</code> 。</li>\n</ul>\n\n<p>连接数组 <code>arr1</code> 和 <code>arr2</code> 形成数组 <code>result</code> 。例如，如果 <code>arr1 == [1,2,3]</code> 且 <code>arr2 == [4,5,6]</code> ，那么 <code>result = [1,2,3,4,5,6]</code> 。</p>\n\n<p>返回整数数组 <code>result</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,1,3,3]\n<strong>输出：</strong>[2,3,1,3]\n<strong>解释：</strong>在前两次操作后，arr1 = [2] ，arr2 = [1] 。\n在第 3 次操作中，两个数组中大于 3 的元素数量都是零，并且长度相等，因此，将 nums[3] 追加到 arr1 。\n在第 4 次操作中，两个数组中大于 3 的元素数量都是零，但 arr2 的长度较小，因此，将 nums[4] 追加到 arr2 。\n在 4 次操作后，arr1 = [2,3] ，arr2 = [1,3] 。\n因此，连接形成的数组 result 是 [2,3,1,3] 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,14,3,1,2]\n<strong>输出：</strong>[5,3,1,2,14]\n<strong>解释：</strong>在前两次操作后，arr1 = [5] ，arr2 = [14] 。\n在第 3 次操作中，两个数组中大于 3 的元素数量都是一，并且长度相等，因此，将 nums[3] 追加到 arr1 。\n在第 4 次操作中，arr1 中大于 1 的元素数量大于 arr2 中的数量（2 &gt; 1），因此，将 nums[4] 追加到 arr1 。\n在第 5 次操作中，arr1 中大于 2 的元素数量大于 arr2 中的数量（2 &gt; 1），因此，将 nums[5] 追加到 arr1 。\n在 5 次操作后，arr1 = [5,3,1,2] ，arr2 = [14] 。\n因此，连接形成的数组 result 是 [5,3,1,2,14] 。\n</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,3,3,3]\n<strong>输出：</strong>[3,3,3,3]\n<strong>解释：</strong>在 4 次操作后，arr1 = [3,3] ，arr2 = [3,3] 。\n因此，连接形成的数组 result 是 [3,3,3,3] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] resultArray(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def resultArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def resultArray(self, nums: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultArray(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] ResultArray(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar resultArray = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function resultArray(nums: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function resultArray($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func resultArray(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun resultArray(nums: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> resultArray(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func resultArray(nums []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef result_array(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def resultArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn result_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (result-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec result_array(Nums :: [integer()]) -> [integer()].\nresult_array(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec result_array(nums :: [integer]) :: [integer]\n  def result_array(nums) do\n    \n  end\nend"}],"testcase":"[2,1,3,3]","testable":true,"templateMeta":{"name":"resultArray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}