{"id":100276,"fid":"LCR 121","name":"寻找目标值 - 二维数组","slug":"er-wei-shu-zu-zhong-de-cha-zhao-lcof","link":"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description/","percent":39.50366719673879,"level":"Medium","category":"algorithms","en_name":"寻找目标值 - 二维数组","cn_name":"寻找目标值 - 二维数组","totalAC":"545.9K","totalSubmit":"1.4M","likes":1030,"dislikes":0,"desc":"<p><code>m</code>*<code>n</code> 的二维数组 <code>plants</code> 记录了园林景观的植物排布情况，具有以下特性：</p>\n\n<ul>\n\t<li>每行中，每棵植物的右侧相邻植物不矮于该植物；</li>\n\t<li>每列中，每棵植物的下侧相邻植物不矮于该植物。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>请判断 <code>plants</code> 中是否存在目标高度值 <code>target</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>plants = [[2,3,6,8],[4,5,8,9],[5,9,10,12]], target = 8\n\n<strong>输出：</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>plants = [[1,3,5],[2,5,7]], target = 4\n\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n</ul>\n\n<p>注意：本题与主站 240 题相同：<a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix-ii/\" rel=\"noopener noreferrer\" target=\"_blank\">https://leetcode-cn.com/problems/search-a-2d-matrix-ii/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool findTargetIn2DPlants(vector<vector<int>>& plants, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean findTargetIn2DPlants(int[][] plants, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findTargetIn2DPlants(self, plants, target):\n        \"\"\"\n        :type plants: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findTargetIn2DPlants(self, plants: List[List[int]], target: int) -> bool:"},{"value":"c","text":"C","defaultCode":"bool findTargetIn2DPlants(int** plants, int plantsSize, int* plantsColSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool FindTargetIn2DPlants(int[][] plants, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} plants\n * @param {number} target\n * @return {boolean}\n */\nvar findTargetIn2DPlants = function(plants, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findTargetIn2DPlants(plants: number[][], target: number): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $plants\n     * @param Integer $target\n     * @return Boolean\n     */\n    function findTargetIn2DPlants($plants, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findTargetIn2DPlants(_ plants: [[Int]], _ target: Int) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findTargetIn2DPlants(plants: Array<IntArray>, target: Int): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool findTargetIn2DPlants(List<List<int>> plants, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findTargetIn2DPlants(plants [][]int, target int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} plants\n# @param {Integer} target\n# @return {Boolean}\ndef find_target_in2_d_plants(plants, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findTargetIn2DPlants(plants: Array[Array[Int]], target: Int): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_target_in2_d_plants(plants: Vec<Vec<i32>>, target: i32) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-target-in2-d-plants plants target)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_target_in2_d_plants(Plants :: [[integer()]], Target :: integer()) -> boolean().\nfind_target_in2_d_plants(Plants, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_target_in2_d_plants(plants :: [[integer]], target :: integer) :: boolean\n  def find_target_in2_d_plants(plants, target) do\n    \n  end\nend"}],"testcase":"[[2,3,6,8],[4,5,8,9],[5,9,10,12]]\n8","testable":true,"templateMeta":{"name":"findTargetIn2DPlants","params":[{"name":"plants","type":"integer[][]"},{"name":"target","type":"integer"}],"return":{"type":"boolean"}}}