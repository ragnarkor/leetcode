{"id":2894,"fid":"2813","name":"子序列最大优雅度","slug":"maximum-elegance-of-a-k-length-subsequence","link":"https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/description/","percent":40.720012101043714,"level":"Hard","category":"algorithms","en_name":"Maximum Elegance of a K-Length Subsequence","cn_name":"子序列最大优雅度","totalAC":"4.1K","totalSubmit":"8.5K","likes":45,"dislikes":0,"desc":"<p>给你一个长度为 <code>n</code> 的二维整数数组 <code>items</code> 和一个整数 <code>k</code> 。</p>\n\n<p><code>items[i] = [profit<sub>i</sub>, category<sub>i</sub>]</code>，其中 <code>profit<sub>i</sub></code> 和 <code>category<sub>i</sub></code> 分别表示第 <code>i</code> 个项目的利润和类别。</p>\n\n<p>现定义&nbsp;<code>items</code> 的 <strong>子序列</strong> 的 <strong>优雅度</strong> 可以用 <code>total_profit + distinct_categories<sup>2</sup></code> 计算，其中 <code>total_profit</code> 是子序列中所有项目的利润总和，<code>distinct_categories</code> 是所选子序列所含的所有类别中不同类别的数量。</p>\n\n<p>你的任务是从 <code>items</code> 所有长度为 <code>k</code> 的子序列中，找出 <strong>最大优雅度</strong> 。</p>\n\n<p>用整数形式表示并返回 <code>items</code> 中所有长度恰好为 <code>k</code> 的子序列的最大优雅度。</p>\n\n<p><strong>注意：</strong>数组的子序列是经由原数组删除一些元素（可能不删除）而产生的新数组，且删除不改变其余元素相对顺序。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>items = [[3,2],[5,1],[10,1]], k = 2\n<strong>输出：</strong>17\n<strong>解释：\n</strong>在这个例子中，我们需要选出长度为 2 的子序列。\n其中一种方案是 items[0] = [3,2] 和 items[2] = [10,1] 。\n子序列的总利润为 3 + 10 = 13 ，子序列包含 2 种不同类别 [2,1] 。\n因此，优雅度为 13 + 2<sup>2</sup> = 17 ，可以证明 17 是可以获得的最大优雅度。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>items = [[3,1],[3,1],[2,2],[5,3]], k = 3\n<strong>输出：</strong>19\n<strong>解释：</strong>\n在这个例子中，我们需要选出长度为 3 的子序列。 \n其中一种方案是 items[0] = [3,1] ，items[2] = [2,2] 和 items[3] = [5,3] 。\n子序列的总利润为 3 + 2 + 5 = 10 ，子序列包含 3 种不同类别 [1, 2, 3] 。 \n因此，优雅度为 10 + 3<sup>2</sup> = 19 ，可以证明 19 是可以获得的最大优雅度。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>items = [[1,1],[2,1],[3,1]], k = 3\n<strong>输出：</strong>7\n<strong>解释：\n</strong>在这个例子中，我们需要选出长度为 3 的子序列。\n我们需要选中所有项目。\n子序列的总利润为 1 + 2 + 3 = 6，子序列包含 1 种不同类别 [1] 。\n因此，最大优雅度为 6 + 1<sup>2</sup> = 7 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>items[i].length == 2</code></li>\n\t<li><code>items[i][0] == profit<sub>i</sub></code></li>\n\t<li><code>items[i][1] == category<sub>i</sub></code></li>\n\t<li><code>1 &lt;= profit<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= category<sub>i</sub> &lt;= n </code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    long long findMaximumElegance(vector<vector<int>>& items, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public long findMaximumElegance(int[][] items, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMaximumElegance(self, items, k):\n        \"\"\"\n        :type items: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:"},{"value":"c","text":"C","defaultCode":"long long findMaximumElegance(int** items, int itemsSize, int* itemsColSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public long FindMaximumElegance(int[][] items, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} items\n * @param {number} k\n * @return {number}\n */\nvar findMaximumElegance = function(items, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findMaximumElegance(items: number[][], k: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $items\n     * @param Integer $k\n     * @return Integer\n     */\n    function findMaximumElegance($items, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMaximumElegance(items: Array<IntArray>, k: Int): Long {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findMaximumElegance(List<List<int>> items, int k) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMaximumElegance(items [][]int, k int) int64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} items\n# @param {Integer} k\n# @return {Integer}\ndef find_maximum_elegance(items, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-maximum-elegance items k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer().\nfind_maximum_elegance(Items, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_maximum_elegance(items :: [[integer]], k :: integer) :: integer\n  def find_maximum_elegance(items, k) do\n\n  end\nend"}],"testcase":"[[3,2],[5,1],[10,1]]\n2","testable":true,"templateMeta":{"name":"findMaximumElegance","params":[{"name":"items","type":"integer[][]"},{"type":"integer","name":"k"}],"return":{"type":"long"}}}