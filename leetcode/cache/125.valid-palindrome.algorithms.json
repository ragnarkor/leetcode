{"id":125,"fid":"125","name":"验证回文串","slug":"valid-palindrome","link":"https://leetcode.cn/problems/valid-palindrome/description/","percent":47.11490566601038,"level":"Easy","category":"algorithms","en_name":"Valid Palindrome","cn_name":"验证回文串","totalAC":"627.4K","totalSubmit":"1.3M","likes":756,"dislikes":0,"desc":"<p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p>\n\n<p>字母和数字都属于字母数字字符。</p>\n\n<p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code><em> </em>；否则，返回<em> </em><code>false</code><em> </em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> s = \"A man, a plan, a canal: Panama\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\"amanaplanacanalpanama\" 是回文串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"race a car\"\n<strong>输出：</strong>false\n<strong>解释：</strong>\"raceacar\" 不是回文串。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \" \"\n<strong>输出：</strong>true\n<strong>解释：</strong>在移除非字母数字字符之后，s 是一个空字符串 \"\" 。\n由于空字符串正着反着读都一样，所以是回文串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由可打印的 ASCII 字符组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isPalindrome(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isPalindrome(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isPalindrome(self, s: str) -> bool:"},{"value":"c","text":"C","defaultCode":"bool isPalindrome(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsPalindrome(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isPalindrome(s: string): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isPalindrome(s: String): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isPalindrome(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isPalindrome(s string) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isPalindrome(s: String): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-palindrome s)\n  (-> string? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n    \n  end\nend"}],"testcase":"\"A man, a plan, a canal: Panama\"","testable":true,"templateMeta":{"name":"isPalindrome","params":[{"name":"s","type":"string"}],"return":{"type":"boolean"}}}