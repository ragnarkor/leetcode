{"id":100287,"fid":"LCR 143","name":"子结构判断","slug":"shu-de-zi-jie-gou-lcof","link":"https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/description/","percent":46.331642261316794,"level":"Medium","category":"algorithms","en_name":"子结构判断","cn_name":"子结构判断","totalAC":"333.5K","totalSubmit":"719.7K","likes":815,"dislikes":0,"desc":"<p>给定两棵二叉树 <code>tree1</code> 和 <code>tree2</code>，判断 <code>tree2</code> 是否以 <code>tree1</code> 的某个节点为根的子树具有 <strong>相同的结构和节点值</strong> 。<br />\n注意，<strong>空树&nbsp;</strong>不会是以 <code>tree1</code> 的某个节点为根的子树具有 <strong>相同的结构和节点值</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode.cn/1694684670-vwyIgY-two_tree.png\" /></p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>输入：</strong>tree1 = [1,7,5], tree2 = [6,1]\n<strong>输出：</strong>false\n<strong>解释：</strong>tree2 与 tree1 的一个子树没有相同的结构和节点值。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode.cn/1694685602-myWXCv-two_tree_2.png\" /></p>\n\n<pre>\n<strong>输入：</strong>tree1 = [3,6,7,1,8], tree2 = [6,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>tree2 与 tree1 的一个子树拥有相同的结构和节点值。即 6 - &gt; 1。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<p><code>0 &lt;= 节点个数 &lt;= 10000</code></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubStructure(TreeNode* A, TreeNode* B) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSubStructure(TreeNode A, TreeNode B) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSubStructure(self, A, B):\n        \"\"\"\n        :type A: TreeNode\n        :type B: TreeNode\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSubStructure(self, A: TreeNode, B: TreeNode) -> bool:"},{"value":"c","text":"C","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isSubStructure(struct TreeNode* A, struct TreeNode* B){\n\n}\n"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsSubStructure(TreeNode A, TreeNode B) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} A\n * @param {TreeNode} B\n * @return {boolean}\n */\nvar isSubStructure = function(A, B) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSubStructure(A: TreeNode | null, B: TreeNode | null): boolean {\n\n};"},{"value":"php","text":"PHP","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $A\n     * @param TreeNode $B\n     * @return Boolean\n     */\n    function isSubStructure($A, $B) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSubStructure(_ A: TreeNode?, _ B: TreeNode?) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSubStructure(A: TreeNode?, B: TreeNode?): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSubStructure(TreeNode? A, TreeNode? B) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSubStructure(A *TreeNode, B *TreeNode) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} a\n# @param {TreeNode} b\n# @return {Boolean}\ndef is_sub_structure(a, b)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSubStructure(A: TreeNode, B: TreeNode): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_sub_structure(a: Option<Rc<RefCell<TreeNode>>>, b: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-sub-structure A B)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_sub_structure(A :: #tree_node{} | null, B :: #tree_node{} | null) -> boolean().\nis_sub_structure(A, B) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_sub_structure(a :: TreeNode.t | nil, b :: TreeNode.t | nil) :: boolean\n  def is_sub_structure(a, b) do\n\n  end\nend"}],"testcase":"[1,2,3,4]\n[3]","testable":true,"templateMeta":{"name":"isSubStructure","params":[{"name":"A","type":"TreeNode"},{"name":"B","type":"TreeNode"}],"return":{"type":"boolean"}}}