{"id":100295,"fid":"LCR 134","name":"Pow(x, n)","slug":"shu-zhi-de-zheng-shu-ci-fang-lcof","link":"https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/description/","percent":35.08358687927512,"level":"Medium","category":"algorithms","en_name":"Pow(x, n)","cn_name":"Pow(x, n)","totalAC":"253.9K","totalSubmit":"722.9K","likes":441,"dislikes":0,"desc":"<p>实现&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>,&nbsp;<em>n</em>)</a>&nbsp;，即计算 x 的 n 次幂函数（即，x<sup>n</sup>）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.00000, n = 10\n<strong>输出：</strong>1024.00000\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.10000, n = 3\n<strong>输出：</strong>9.26100</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 2.00000, n = -2\n<strong>输出：</strong>0.25000\n<strong>解释：</strong>2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup>&nbsp;&lt;= x<sup>n</sup>&nbsp;&lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>注意：本题与主站 50 题相同：<a href=\"https://leetcode-cn.com/problems/powx-n/\">https://leetcode-cn.com/problems/powx-n/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double myPow(double x, int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double myPow(double x, int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def myPow(self, x: float, n: int) -> float:"},{"value":"c","text":"C","defaultCode":"\n\ndouble myPow(double x, int n){\n\n}\n"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double MyPow(double x, int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function myPow(x: number, n: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun myPow(x: Double, n: Int): Double {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  double myPow(double x, int n) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func myPow(x float64, n int) float64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def myPow(x: Double, n: Int): Double = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n\n  end\nend"}],"testcase":"2.00000\n10","testable":true,"templateMeta":{"name":"myPow","params":[{"name":"x","type":"double"},{"name":"n","type":"integer"}],"return":{"type":"double"}}}