{"id":5,"fid":"5","name":"最长回文子串","slug":"longest-palindromic-substring","link":"https://leetcode.cn/problems/longest-palindromic-substring/description/","percent":38.37557561100737,"level":"Medium","category":"algorithms","en_name":"Longest Palindromic Substring","cn_name":"最长回文子串","totalAC":"1.7M","totalSubmit":"4.5M","likes":7250,"dislikes":0,"desc":"<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的 <span data-keyword=\"palindromic-string\">回文</span> <span data-keyword=\"substring-nonempty\">子串</span>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"babad\"\n<strong>输出：</strong>\"bab\"\n<strong>解释：</strong>\"aba\" 同样是符合题意的答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"cbbd\"\n<strong>输出：</strong>\"bb\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> 仅由数字和英文字母组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String longestPalindrome(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def longestPalindrome(self, s: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* longestPalindrome(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string LongestPalindrome(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function longestPalindrome(s: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func longestPalindrome(_ s: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun longestPalindrome(s: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func longestPalindrome(s string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"}],"testcase":"\"babad\"","testable":true,"templateMeta":{"name":"longestPalindrome","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}