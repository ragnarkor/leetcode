{"id":100292,"fid":"LCR 133","name":"位 1 的个数","slug":"er-jin-zhi-zhong-1de-ge-shu-lcof","link":"https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/description/","percent":76.00443826579513,"level":"Easy","category":"algorithms","en_name":"位 1 的个数","cn_name":"位 1 的个数","totalAC":"353.6K","totalSubmit":"465K","likes":338,"dislikes":0,"desc":"<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为&nbsp;<a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">汉明重量</a>).）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n\t<li>在 Java 中，编译器使用 <a href=\"https://baike.baidu.com/item/二进制补码/5295284\">二进制补码</a> 记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 3&nbsp;</strong>中，输入表示有符号整数 <code>-3</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 11 (控制台输入 00000000000000000000000000001011)\n<strong>输出：</strong>3\n<strong>解释：</strong>输入的二进制串 <code><strong>00000000000000000000000000001011</strong>&nbsp;中，共有三位为 '1'。</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 128 (控制台输入 00000000000000000000000010000000)\n<strong>输出：</strong>1\n<strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong>&nbsp;中，共有一位为 '1'。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）\n<strong>输出：</strong>31\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 '1'。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>注意：本题与主站 191 题相同：<a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\">https://leetcode-cn.com/problems/number-of-1-bits/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\n    // you need to treat n as an unsigned value\n    public int hammingWeight(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def hammingWeight(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int hammingWeight(uint32_t n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int HammingWeight(uint n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n - a positive integer\n * @return {number}\n */\nvar hammingWeight = function(n) {\n    \n};"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func hammingWeight(num uint32) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\n# @return {Integer}\ndef hamming_weight(n)\n    \nend"}],"testcase":"00000000000000000000000000001011","testable":true,"templateMeta":{"name":"hammingWeight","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"},"languages":["cpp","java","python","c","csharp","javascript","ruby","golang","python3"],"manual":true}}