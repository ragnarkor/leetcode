{"id":100278,"fid":"LCR 128","name":"库存管理 I","slug":"xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof","link":"https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/description/","percent":49.555109401854324,"level":"Easy","category":"algorithms","en_name":"库存管理 I","cn_name":"库存管理 I","totalAC":"514.5K","totalSubmit":"1M","likes":869,"dislikes":0,"desc":"<p>仓库管理员以数组 <code>stock</code> 形式记录商品库存表。<code>stock[i]</code> 表示商品 <code>id</code>，可能存在重复。原库存表按商品 <code>id</code> 升序排列。现因突发情况需要进行商品紧急调拨，管理员将这批商品 <code>id</code> 提前依次整理至库存表最后。请你找到并返回库存表中编号的 <strong>最小的元素</strong> 以便及时记录本次调拨。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>stock =<strong> </strong>[4,5,8,3,4]\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>stock = [5,7,9,1,2]\n<strong>输出：</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p>提示：</p>\n\n<ul>\n\t<li>1 &lt;= stock.length &lt;= 5000</li>\n\t<li>-5000 &lt;= stock[i] &lt;= 5000</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>注意：本题与主站 154 题相同：<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/\">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int stockManagement(vector<int>& stock) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int stockManagement(int[] stock) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def stockManagement(self, stock):\n        \"\"\"\n        :type stock: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def stockManagement(self, stock: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int stockManagement(int* stock, int stockSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int StockManagement(int[] stock) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} stock\n * @return {number}\n */\nvar stockManagement = function(stock) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function stockManagement(stock: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $stock\n     * @return Integer\n     */\n    function stockManagement($stock) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func stockManagement(_ stock: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun stockManagement(stock: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int stockManagement(List<int> stock) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func stockManagement(stock []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} stock\n# @return {Integer}\ndef stock_management(stock)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def stockManagement(stock: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn stock_management(stock: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (stock-management stock)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec stock_management(Stock :: [integer()]) -> integer().\nstock_management(Stock) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec stock_management(stock :: [integer]) :: integer\n  def stock_management(stock) do\n    \n  end\nend"}],"testcase":"[4,5,8,3,4]","testable":true,"templateMeta":{"name":"inventoryManagement","params":[{"name":"stock","type":"integer[]"}],"return":{"type":"integer"}}}