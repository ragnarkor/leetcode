{"id":100305,"fid":"LCR 155","name":"将二叉搜索树转化为排序的双向链表","slug":"er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof","link":"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/description/","percent":65.0701748983003,"level":"Medium","category":"algorithms","en_name":"将二叉搜索树转化为排序的双向链表","cn_name":"将二叉搜索树转化为排序的双向链表","totalAC":"234.1K","totalSubmit":"359.4K","likes":744,"dislikes":0,"desc":"<p>将一个 <strong>二叉搜索树</strong> 就地转化为一个 <strong>已排序的双向循环链表</strong> 。</p>\n\n<p>对于双向循环列表，你可以将左右孩子指针作为双向循环链表的前驱和后继指针，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n\n<p>特别地，我们希望可以 <strong>就地</strong> 完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中最小元素的指针。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [4,2,5,1,3] \n\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png\" />\n<strong>输出：</strong>[1,2,3,4,5]\n\n<strong>解释：</strong>下图显示了转化后的二叉搜索树，实线表示后继关系，虚线表示前驱关系。\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png\" />\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [2,1,3]\n<strong>输出：</strong>[1,2,3]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n<strong>解释：</strong>输入是空树，所以输出也是空链表。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>Node.left.val &lt; Node.val &lt; Node.right.val</code></li>\n\t<li><code>Node.val</code> 的所有值都是独一无二的</li>\n\t<li><code>0 &lt;= Number of Nodes &lt;= 2000</code></li>\n</ul>\n\n<p>注意：本题与主站 426 题相同：<a href=\"https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/\" rel=\"noopener noreferrer\" target=\"_blank\">https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/</a></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        left = NULL;\n        right = NULL;\n    }\n\n    Node(int _val, Node* _left, Node* _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\npublic:\n    Node* treeToDoublyList(Node* root) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    public Node treeToDoublyList(Node root) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\nclass Solution(object):\n    def treeToDoublyList(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\nclass Solution:\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\n        "},{"value":"csharp","text":"C#","defaultCode":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n        left = null;\n        right = null;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n}\n*/\n\npublic class Solution {\n    public Node TreeToDoublyList(Node root) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * // Definition for a Node.\n * function Node(val,left,right) {\n *    this.val = val;\n *    this.left = left;\n *    this.right = right;\n * };\n */\n/**\n * @param {Node} root\n * @return {Node}\n */\nvar treeToDoublyList = function(root) {\n\n};"}],"testcase":"[4,2,5,1,3]","testable":true,"templateMeta":{"name":"treeToDoublyList","params":[{"name":"root","type":"Node"}],"return":{"type":"Node"},"structures":[{"name":"Node","comment":"Definition for a Node.","members":[{"name":"val","type":"integer"},{"name":"left","type":"Node"},{"name":"right","type":"Node"}]}],"languages":["cpp","java","python","csharp","javascript","python3"],"manual":true}}