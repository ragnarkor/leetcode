{"id":100291,"fid":"LCR 139","name":"训练计划 I","slug":"diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof","link":"https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/description/","percent":64.98069905558096,"level":"Easy","category":"algorithms","en_name":"训练计划 I","cn_name":"训练计划 I","totalAC":"409.2K","totalSubmit":"629.4K","likes":336,"dislikes":0,"desc":"<p>教练使用整数数组 <code>actions</code> 记录一系列核心肌群训练项目编号。为增强训练趣味性，需要将所有奇数编号训练项目调整至偶数编号训练项目之前。请将调整后的训练项目编号以 <strong>数组</strong> 形式返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>actions = [1,2,3,4,5]\n<strong>输出：</strong>[1,3,5,2,4] \n<strong>解释：</strong>为正确答案之一</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= actions.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= actions[i] &lt;= 10000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> trainingPlan(vector<int>& actions) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] trainingPlan(int[] actions) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def trainingPlan(self, actions):\n        \"\"\"\n        :type actions: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def trainingPlan(self, actions: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* trainingPlan(int* actions, int actionsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] TrainingPlan(int[] actions) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} actions\n * @return {number[]}\n */\nvar trainingPlan = function(actions) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function trainingPlan(actions: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $actions\n     * @return Integer[]\n     */\n    function trainingPlan($actions) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func trainingPlan(_ actions: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun trainingPlan(actions: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> trainingPlan(List<int> actions) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func trainingPlan(actions []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} actions\n# @return {Integer[]}\ndef training_plan(actions)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def trainingPlan(actions: Array[Int]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn training_plan(actions: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (training-plan actions)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec training_plan(Actions :: [integer()]) -> [integer()].\ntraining_plan(Actions) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec training_plan(actions :: [integer]) :: [integer]\n  def training_plan(actions) do\n    \n  end\nend"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"trainingPlan","params":[{"name":"actions","type":"integer[]"}],"return":{"type":"integer[]"}}}