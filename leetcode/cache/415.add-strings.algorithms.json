{"id":415,"fid":"415","name":"字符串相加","slug":"add-strings","link":"https://leetcode.cn/problems/add-strings/description/","percent":54.58208218926023,"level":"Easy","category":"algorithms","en_name":"Add Strings","cn_name":"字符串相加","totalAC":"344.1K","totalSubmit":"630.4K","likes":851,"dislikes":0,"desc":"<p>给定两个字符串形式的非负整数&nbsp;<code>num1</code> 和<code>num2</code>&nbsp;，计算它们的和并同样以字符串形式返回。</p>\n\n<p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>），&nbsp;也不能直接将输入的字符串转换为整数形式。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"11\", num2 = \"123\"\n<strong>输出：</strong>\"134\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"456\", num2 = \"77\"\n<strong>输出：</strong>\"533\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"0\", num2 = \"0\"\n<strong>输出：</strong>\"0\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都只包含数字&nbsp;<code>0-9</code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String addStrings(String num1, String num2) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* addStrings(char* num1, char* num2) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string AddStrings(string num1, string num2) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function addStrings(num1: string, num2: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun addStrings(num1: String, num2: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String addStrings(String num1, String num2) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func addStrings(num1 string, num2 string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (add-strings num1 num2)\n  (-> string? string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_strings(Num1, Num2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\n  def add_strings(num1, num2) do\n    \n  end\nend"}],"testcase":"\"11\"\n\"123\"","testable":true,"templateMeta":{"name":"addStrings","params":[{"name":"num1","type":"string"},{"name":"num2","type":"string"}],"return":{"type":"string"}}}