{"id":7,"fid":"7","name":"整数反转","slug":"reverse-integer","link":"https://leetcode.cn/problems/reverse-integer/description/","percent":35.49189606737368,"level":"Medium","category":"algorithms","en_name":"Reverse Integer","cn_name":"整数反转","totalAC":"1.3M","totalSubmit":"3.7M","likes":3993,"dislikes":0,"desc":"<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>\n\n<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2<sup>31</sup>,  2<sup>31 </sup>− 1]</code> ，就返回 0。</p>\n<strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 123\n<strong>输出：</strong>321\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = -123\n<strong>输出：</strong>-321\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 120\n<strong>输出：</strong>21\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 0\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> <= x <= 2<sup>31</sup> - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int reverse(int x) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int reverse(int x) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reverse(self, x: int) -> int:"},{"value":"c","text":"C","defaultCode":"int reverse(int x){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Reverse(int x) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function reverse(x: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reverse(_ x: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun reverse(x: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int reverse(int x) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func reverse(x int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def reverse(x: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"}],"testcase":"123","testable":true,"templateMeta":{"name":"reverse","params":[{"name":"x","type":"integer"}],"return":{"type":"integer"}}}