{"id":100280,"fid":"LCR 122","name":"路径加密","slug":"ti-huan-kong-ge-lcof","link":"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/","percent":74.81469288450788,"level":"Easy","category":"algorithms","en_name":"路径加密","cn_name":"路径加密","totalAC":"745.8K","totalSubmit":"996.8K","likes":582,"dislikes":0,"desc":"<p>假定一段路径记作字符串 <code>path</code>，其中以 \"<code>.</code>\" 作为分隔符。现需将路径加密，加密方法为将 <code>path</code> 中的分隔符替换为空格 \"<code> </code>\"，请返回加密后的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>path = \"a.aef.qerf.bb\"\n\n<strong>输出：</strong>\"a aef qerf bb\"\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>限制：</strong></p>\n\n<p><code>0 &lt;= path.length&nbsp;&lt;= 10000</code></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string pathEncryption(string path) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String pathEncryption(String path) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def pathEncryption(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def pathEncryption(self, path: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* pathEncryption(char* path) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string PathEncryption(string path) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} path\n * @return {string}\n */\nvar pathEncryption = function(path) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function pathEncryption(path: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function pathEncryption($path) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func pathEncryption(_ path: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun pathEncryption(path: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String pathEncryption(String path) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func pathEncryption(path string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} path\n# @return {String}\ndef path_encryption(path)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def pathEncryption(path: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn path_encryption(path: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (path-encryption path)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec path_encryption(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\npath_encryption(Path) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec path_encryption(path :: String.t) :: String.t\n  def path_encryption(path) do\n    \n  end\nend"}],"testcase":"\"a.aef.qerf.bb\"","testable":true,"templateMeta":{"name":"pathEncryption","params":[{"name":"path","type":"string"}],"return":{"type":"string"}}}