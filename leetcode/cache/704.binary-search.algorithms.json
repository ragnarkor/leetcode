{"id":792,"fid":"704","name":"二分查找","slug":"binary-search","link":"https://leetcode.cn/problems/binary-search/description/","percent":55.41645910620828,"level":"Easy","category":"algorithms","en_name":"Binary Search","cn_name":"二分查找","totalAC":"1.3M","totalSubmit":"2.3M","likes":1597,"dislikes":0,"desc":"<p>给定一个&nbsp;<code>n</code>&nbsp;个元素有序的（升序）整型数组&nbsp;<code>nums</code> 和一个目标值&nbsp;<code>target</code> &nbsp;，写一个函数搜索&nbsp;<code>nums</code>&nbsp;中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p>\n\n<p><br>\n<strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>输出:</strong> 4\n<strong>解释:</strong> 9 出现在 <code>nums</code> 中并且下标为 4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>输出:</strong> -1\n<strong>解释:</strong> 2 不存在 <code>nums</code> 中因此返回 -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>你可以假设 <code>nums</code>&nbsp;中的所有元素是不重复的。</li>\n\t<li><code>n</code>&nbsp;将在&nbsp;<code>[1, 10000]</code>之间。</li>\n\t<li><code>nums</code>&nbsp;的每个元素都将在&nbsp;<code>[-9999, 9999]</code>之间。</li>\n</ol>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int search(int[] nums, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def search(self, nums: List[int], target: int) -> int:"},{"value":"c","text":"C","defaultCode":"int search(int* nums, int numsSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Search(int[] nums, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function search(nums: number[], target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int search(List<int> nums, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func search(nums []int, target int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend"}],"testcase":"[-1,0,3,5,9,12]\n9","testable":true,"templateMeta":{"name":"search","params":[{"name":"nums","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}