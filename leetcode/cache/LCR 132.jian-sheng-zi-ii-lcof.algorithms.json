{"id":100285,"fid":"LCR 132","name":"砍竹子 II","slug":"jian-sheng-zi-ii-lcof","link":"https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/description/","percent":31.32829811435116,"level":"Medium","category":"algorithms","en_name":"砍竹子 II","cn_name":"砍竹子 II","totalAC":"159.9K","totalSubmit":"510.5K","likes":268,"dislikes":0,"desc":"<p>现需要将一根长为正整数 <code>bamboo_len</code> 的竹子砍为若干段，每段长度均为 <strong>正整数</strong>。请返回每段竹子长度的 <strong>最大乘积</strong> 是多少。</p>\n\n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>bamboo_len = 12\n<strong>输出：</strong>81\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= bamboo_len &lt;= 1000</code></li>\n</ul>\n\n<p>注意：本题与主站 343 题相同：<a href=\"https://leetcode-cn.com/problems/integer-break/\">https://leetcode-cn.com/problems/integer-break/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int cuttingBamboo(int bamboo_len) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int cuttingBamboo(int bamboo_len) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def cuttingBamboo(self, bamboo_len):\n        \"\"\"\n        :type bamboo_len: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def cuttingBamboo(self, bamboo_len: int) -> int:"},{"value":"c","text":"C","defaultCode":"int cuttingBamboo(int bamboo_len) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CuttingBamboo(int bamboo_len) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} bamboo_len\n * @return {number}\n */\nvar cuttingBamboo = function(bamboo_len) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function cuttingBamboo(bamboo_len: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $bamboo_len\n     * @return Integer\n     */\n    function cuttingBamboo($bamboo_len) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func cuttingBamboo(_ bamboo_len: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun cuttingBamboo(bamboo_len: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int cuttingBamboo(int bamboo_len) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func cuttingBamboo(bamboo_len int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} bamboo_len\n# @return {Integer}\ndef cutting_bamboo(bamboo_len)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def cuttingBamboo(bamboo_len: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn cutting_bamboo(bamboo_len: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (cutting-bamboo bamboo_len)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec cutting_bamboo(Bamboo_len :: integer()) -> integer().\ncutting_bamboo(Bamboo_len) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec cutting_bamboo(bamboo_len :: integer) :: integer\n  def cutting_bamboo(bamboo_len) do\n    \n  end\nend"}],"testcase":"12","testable":true,"templateMeta":{"name":"cuttingBamboo","params":[{"name":"bamboo_len","type":"integer"}],"return":{"type":"integer"}}}