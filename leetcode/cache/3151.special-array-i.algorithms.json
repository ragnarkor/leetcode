{"id":3429,"fid":"3151","name":"特殊数组 I","slug":"special-array-i","link":"https://leetcode.cn/problems/special-array-i/description/","percent":83.26530612244898,"level":"Easy","category":"algorithms","en_name":"Special Array I","cn_name":"特殊数组 I","totalAC":"12.5K","totalSubmit":"14.6K","likes":7,"dislikes":0,"desc":"<p>如果数组的每一对相邻元素都是两个奇偶性不同的数字，则该数组被认为是一个 <strong>特殊数组</strong> 。</p>\n\n<p>Aging 有一个整数数组 <code>nums</code>。如果 <code>nums</code> 是一个 <strong>特殊数组</strong> ，返回 <code>true</code>，否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [1]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>只有一个元素，所以答案为 <code>true</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [2,1,4]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">true</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>只有两对相邻元素： <code>(2,1)</code> 和 <code>(1,4)</code>，它们都包含了奇偶性不同的数字，因此答案为 <code>true</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">nums = [4,3,1,6]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">false</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><code>nums[1]</code> 和 <code>nums[2]</code> 都是奇数。因此答案为 <code>false</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isArraySpecial(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isArraySpecial(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isArraySpecial(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isArraySpecial(self, nums: List[int]) -> bool:"},{"value":"c","text":"C","defaultCode":"bool isArraySpecial(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsArraySpecial(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isArraySpecial = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isArraySpecial(nums: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isArraySpecial($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isArraySpecial(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isArraySpecial(nums: IntArray): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isArraySpecial(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isArraySpecial(nums []int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Boolean}\ndef is_array_special(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isArraySpecial(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_array_special(nums: Vec<i32>) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-array-special nums)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_array_special(Nums :: [integer()]) -> boolean().\nis_array_special(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_array_special(nums :: [integer]) :: boolean\n  def is_array_special(nums) do\n    \n  end\nend"}],"testcase":"[1]","testable":true,"templateMeta":{"name":"isArraySpecial","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}