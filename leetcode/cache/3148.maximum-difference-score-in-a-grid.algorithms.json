{"id":3391,"fid":"3148","name":"矩阵中的最大得分","slug":"maximum-difference-score-in-a-grid","link":"https://leetcode.cn/problems/maximum-difference-score-in-a-grid/description/","percent":49.61144689774269,"level":"Medium","category":"algorithms","en_name":"Maximum Difference Score in a Grid","cn_name":"矩阵中的最大得分","totalAC":"9.1K","totalSubmit":"15.4K","likes":31,"dislikes":0,"desc":"<p>给你一个由 <strong>正整数</strong> 组成、大小为 <code>m x n</code> 的矩阵 <code>grid</code>。你可以从矩阵中的任一单元格移动到另一个位于正下方或正右侧的任意单元格（不必相邻）。从值为 <code>c1</code> 的单元格移动到值为 <code>c2</code> 的单元格的得分为 <code>c2 - c1</code> 。</p>\n\n<p>你可以从<strong> 任一</strong> 单元格开始，并且必须至少移动一次。</p>\n\n<p>返回你能得到的 <strong>最大 </strong>总得分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/14/grid1.png\" style=\"width: 240px; height: 240px;\" />\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">9</span></p>\n\n<p><strong>解释：</strong>从单元格 <code>(0, 1)</code> 开始，并执行以下移动：<br />\n- 从单元格 <code>(0, 1)</code> 移动到 <code>(2, 1)</code>，得分为 <code>7 - 5 = 2</code> 。<br />\n- 从单元格 <code>(2, 1)</code> 移动到 <code>(2, 2)</code>，得分为 <code>14 - 7 = 7</code> 。<br />\n总得分为 <code>2 + 7 = 9</code> 。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/08/moregridsdrawio-1.png\" style=\"width: 180px; height: 116px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">grid = [[4,3,2],[3,2,1]]</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">-1</span></p>\n\n<p><strong>解释：</strong>从单元格 <code>(0, 0)</code> 开始，执行一次移动：从 <code>(0, 0)</code> 到 <code>(0, 1)</code> 。得分为 <code>3 - 4 = -1</code> 。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxScore(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxScore(List<List<Integer>> grid) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int maxScore(int** grid, int gridSize, int* gridColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxScore(IList<IList<int>> grid) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxScore = function(grid) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxScore(grid: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxScore($grid) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxScore(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxScore(grid: List<List<Int>>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxScore(List<List<int>> grid) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxScore(grid [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef max_score(grid)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxScore(grid: List[List[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_score(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-score grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_score(Grid :: [[integer()]]) -> integer().\nmax_score(Grid) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_score(grid :: [[integer]]) :: integer\n  def max_score(grid) do\n    \n  end\nend"}],"testcase":"[[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]","testable":true,"templateMeta":{"name":"maxScore","params":[{"name":"grid","type":"list<list<integer>>"}],"return":{"type":"integer"}}}