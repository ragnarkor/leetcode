{"id":3416,"fid":"3153","name":"所有数对中数位不同之和","slug":"sum-of-digit-differences-of-all-pairs","link":"https://leetcode.cn/problems/sum-of-digit-differences-of-all-pairs/description/","percent":54.72591034573419,"level":"Medium","category":"algorithms","en_name":"Sum of Digit Differences of All Pairs","cn_name":"所有数对中数位不同之和","totalAC":"15.2K","totalSubmit":"27.4K","likes":39,"dislikes":0,"desc":"<p>你有一个数组&nbsp;<code>nums</code>&nbsp;，它只包含 <strong>正</strong>&nbsp;整数，所有正整数的数位长度都 <strong>相同</strong>&nbsp;。</p>\n\n<p>两个整数的 <strong>数位差</strong>&nbsp;指的是两个整数 <b>相同</b>&nbsp;位置上不同数字的数目。</p>\n\n<p>请你返回 <code>nums</code>&nbsp;中 <strong>所有</strong>&nbsp;整数对里，<strong>数位差之和。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [13,23,12]</span></p>\n\n<p><b>输出：</b>4</p>\n\n<p><strong>解释：</strong><br />\n计算过程如下：<br />\n-&nbsp;<strong>1</strong>3 和&nbsp;<strong>2</strong>3 的数位差为&nbsp;1 。<br />\n- 1<strong>3</strong> 和 1<strong>2</strong>&nbsp;的数位差为&nbsp;1 。<br />\n-&nbsp;<strong>23</strong> 和&nbsp;<strong>12</strong>&nbsp;的数位差为&nbsp;2 。<br />\n所以所有整数数对的数位差之和为&nbsp;<code>1 + 1 + 2 = 4</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [10,10,10,10]</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>0</span></p>\n\n<p><strong>解释：</strong><br />\n数组中所有整数都相同，所以所有整数数对的数位不同之和为 0 。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>9</sup></code></li>\n\t<li><code>nums</code>&nbsp;中的整数都有相同的数位长度。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    long long sumDigitDifferences(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public long sumDigitDifferences(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sumDigitDifferences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sumDigitDifferences(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"long long sumDigitDifferences(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public long SumDigitDifferences(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumDigitDifferences = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function sumDigitDifferences(nums: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumDigitDifferences($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sumDigitDifferences(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sumDigitDifferences(nums: IntArray): Long {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int sumDigitDifferences(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func sumDigitDifferences(nums []int) int64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef sum_digit_differences(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sumDigitDifferences(nums: Array[Int]): Long = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn sum_digit_differences(nums: Vec<i32>) -> i64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (sum-digit-differences nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec sum_digit_differences(Nums :: [integer()]) -> integer().\nsum_digit_differences(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec sum_digit_differences(nums :: [integer]) :: integer\n  def sum_digit_differences(nums) do\n    \n  end\nend"}],"testcase":"[13,23,12]","testable":true,"templateMeta":{"name":"sumDigitDifferences","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"long"}}}