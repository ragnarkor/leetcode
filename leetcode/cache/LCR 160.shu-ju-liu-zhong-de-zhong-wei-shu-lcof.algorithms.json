{"id":100303,"fid":"LCR 160","name":"数据流中的中位数","slug":"shu-ju-liu-zhong-de-zhong-wei-shu-lcof","link":"https://leetcode.cn/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/description/","percent":58.096740063481924,"level":"Hard","category":"algorithms","en_name":"数据流中的中位数","cn_name":"数据流中的中位数","totalAC":"146.6K","totalSubmit":"252.2K","likes":473,"dislikes":0,"desc":"<p><strong>中位数&nbsp;</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p>\n\n<p>例如，<br />\n<code>[2,3,4]</code> 的中位数是 <code>3</code><br />\n<code>[2,3]</code> 的中位数是 <code>(2 + 3) / 2 = 2.5</code><br />\n设计一个支持以下两种操作的数据结构：</p>\n\n<ul>\n\t<li><code>void addNum(int num)</code> - 从数据流中添加一个整数到数据结构中。</li>\n\t<li><code>double findMedian()</code> - 返回目前所有元素的中位数。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：\n</strong>[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n<strong>输出：</strong>[null,null,null,1.50000,null,2.00000]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：\n</strong>[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n<strong>输出：</strong>[null,null,2.00000,null,2.50000]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>最多会对&nbsp;<code>addNum、findMedian</code> 进行&nbsp;<code>50000</code>&nbsp;次调用。</li>\n</ul>\n\n<p>注意：本题与主站 295 题相同：<a href=\"https://leetcode-cn.com/problems/find-median-from-data-stream/\">https://leetcode-cn.com/problems/find-median-from-data-stream/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    MedianFinder() {\n\n    }\n    \n    void addNum(int num) {\n\n    }\n    \n    double findMedian() {\n\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */"},{"value":"java","text":"Java","defaultCode":"class MedianFinder {\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n\n    }\n    \n    public void addNum(int num) {\n\n    }\n    \n    public double findMedian() {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */"},{"value":"python","text":"Python","defaultCode":"class MedianFinder(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n\n\n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n\n\n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"},{"value":"python3","text":"Python3","defaultCode":"class MedianFinder:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n\n\n    def addNum(self, num: int) -> None:\n\n\n    def findMedian(self) -> float:\n\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MedianFinder;\n\n/** initialize your data structure here. */\n\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n \n * double param_2 = medianFinderFindMedian(obj);\n \n * medianFinderFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class MedianFinder {\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n\n    }\n    \n    public void AddNum(int num) {\n\n    }\n    \n    public double FindMedian() {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MedianFinder {\n    constructor() {\n        \n    }\n\n    addNum(num: number): void {\n        \n    }\n\n    findMedian(): number {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"},{"value":"php","text":"PHP","defaultCode":"class MedianFinder {\n    /**\n     * initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addNum($num) {\n\n    }\n\n    /**\n     * @return Float\n     */\n    function findMedian() {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * $obj = MedianFinder();\n * $obj->addNum($num);\n * $ret_2 = $obj->findMedian();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MedianFinder {\n\n    /** initialize your data structure here. */\n    init() {\n\n    }\n    \n    func addNum(_ num: Int) {\n\n    }\n    \n    func findMedian() -> Double {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder()\n * obj.addNum(num)\n * let ret_2: Double = obj.findMedian()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MedianFinder() {\n\n    /** initialize your data structure here. */\n\n\n    fun addNum(num: Int) {\n\n    }\n\n    fun findMedian(): Double {\n\n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"},{"value":"dart","text":"Dart","defaultCode":"class MedianFinder {\n\n  /** initialize your data structure here. */\n  MedianFinder() {\n    \n  }\n  \n  void addNum(int num) {\n    \n  }\n  \n  double findMedian() {\n    \n  }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = MedianFinder();\n * obj.addNum(num);\n * double param2 = obj.findMedian();\n */"},{"value":"golang","text":"Go","defaultCode":"type MedianFinder struct {\n\n}\n\n\n/** initialize your data structure here. */\nfunc Constructor() MedianFinder {\n\n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n\n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n\n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MedianFinder\n\n=begin\n    initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_num(num)\n\n    end\n\n\n=begin\n    :rtype: Float\n=end\n    def find_median()\n\n    end\n\n\nend\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder.new()\n# obj.add_num(num)\n# param_2 = obj.find_median()"},{"value":"scala","text":"Scala","defaultCode":"class MedianFinder() {\n\n    /** initialize your data structure here. */\n\n\n    def addNum(num: Int) {\n\n    }\n\n    def findMedian(): Double = {\n\n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MedianFinder {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MedianFinder {\n\n    /** initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    fn add_num(&self, num: i32) {\n\n    }\n    \n    fn find_median(&self) -> f64 {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder::new();\n * obj.add_num(num);\n * let ret_2: f64 = obj.find_median();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define median-finder%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add-num : exact-integer? -> void?\n    (define/public (add-num num)\n      )\n    ; find-median : -> flonum?\n    (define/public (find-median)\n      )))\n\n;; Your median-finder% object will be instantiated and called as such:\n;; (define obj (new median-finder%))\n;; (send obj add-num num)\n;; (define param_2 (send obj find-median))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec median_finder_init_() -> any().\nmedian_finder_init_() ->\n  .\n\n-spec median_finder_add_num(Num :: integer()) -> any().\nmedian_finder_add_num(Num) ->\n  .\n\n-spec median_finder_find_median() -> float().\nmedian_finder_find_median() ->\n  .\n\n\n%% Your functions will be called as such:\n%% median_finder_init_(),\n%% median_finder_add_num(Num),\n%% Param_2 = median_finder_find_median(),\n\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MedianFinder do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec add_num(num :: integer) :: any\n  def add_num(num) do\n    \n  end\n\n  @spec find_median() :: float\n  def find_median() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MedianFinder.init_()\n# MedianFinder.add_num(num)\n# param_2 = MedianFinder.find_median()\n\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]","testable":true,"templateMeta":{"classname":"MedianFinder","maxbytesperline":410000,"constructor":{"params":[],"comment":"initialize your data structure here."},"methods":[{"name":"addNum","params":[{"type":"integer","name":"num"}],"return":{"type":"void"}},{"name":"findMedian","params":[],"return":{"type":"double"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}