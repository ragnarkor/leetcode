{"id":3411,"fid":"3145","name":"大数组元素的乘积","slug":"find-products-of-elements-of-big-array","link":"https://leetcode.cn/problems/find-products-of-elements-of-big-array/description/","percent":45.30950861518826,"level":"Hard","category":"algorithms","en_name":"Find Products of Elements of Big Array","cn_name":"大数组元素的乘积","totalAC":"2.5K","totalSubmit":"3.8K","likes":20,"dislikes":0,"desc":"<p>一个非负整数 <code>x</code>&nbsp;的 <strong>强数组</strong>&nbsp;指的是满足元素为 2 的幂且元素总和为 <code>x</code> 的最短有序数组。下表说明了如何确定 <strong>强数组</strong> 的示例。可以证明，<code>x</code>&nbsp;对应的强数组是独一无二的。</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>数字</th>\n\t\t\t<th>二进制表示</th>\n\t\t\t<th>强数组</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>0000<u>1</u></td>\n\t\t\t<td>[1]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>8</td>\n\t\t\t<td>0<u>1</u>000</td>\n\t\t\t<td>[8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>10</td>\n\t\t\t<td>0<u>1</u>0<u>1</u>0</td>\n\t\t\t<td>[2, 8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>13</td>\n\t\t\t<td>0<u>11</u>0<u>1</u></td>\n\t\t\t<td>[1, 4, 8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>23</td>\n\t\t\t<td><u>1</u>0<u>111</u></td>\n\t\t\t<td>[1, 2, 4, 16]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>我们将每一个升序的正整数 <code>i</code>&nbsp;（即1，2，3等等）的 <strong>强数组</strong>&nbsp;连接得到数组&nbsp;<code>big_nums</code>&nbsp;，<code>big_nums</code>&nbsp;开始部分为&nbsp;<code>[<u>1</u>, <u>2</u>, <u>1, 2</u>, <u>4</u>, <u>1, 4</u>, <u>2, 4</u>, <u>1, 2, 4</u>, <u>8</u>, ...]</code>&nbsp;。</p>\n\n<p>给你一个二维整数数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>, mod<sub>i</sub>]</code>&nbsp;，你需要计算&nbsp;<code>(big_nums[from<sub>i</sub>] * big_nums[from<sub>i</sub> + 1] * ... * big_nums[to<sub>i</sub>]) % mod<sub>i</sub></code>&nbsp;。</p>\n\n<p>请你返回一个整数数组&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[i]</code>&nbsp;是第 <code>i</code>&nbsp;个查询的答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><b>输入：</b>queries = [[1,3,7]]</p>\n\n<p><b>输出：</b>[4]</p>\n\n<p><strong>解释：</strong></p>\n\n<p>只有一个查询。</p>\n\n<p><code>big_nums[1..3] = [2,1,2]</code>&nbsp;。它们的乘积为 4。结果为&nbsp;<code>4 % 7 = 4</code>。</p>\n\n<p><strong>示例 2：</strong></p>\n\n<p><b>输入：</b>queries = [[2,5,3],[7,7,4]]</p>\n\n<p><b>输出：</b>[2,2]</p>\n\n<p><strong>解释：</strong></p>\n\n<p>有两个查询。</p>\n\n<p>第一个查询：<code>big_nums[2..5] = [1,2,4,1]</code>&nbsp;。它们的乘积为 8 。结果为&nbsp; <code>8 % 3 = 2</code>。</p>\n\n<p>第二个查询：<code>big_nums[7] = 2</code>&nbsp;。结果为 <code>2 % 4 = 2</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 3</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= queries[i][2] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findProductsOfElements(vector<vector<long long>>& queries) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findProductsOfElements(long[][] queries) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findProductsOfElements(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findProductsOfElements(long long** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FindProductsOfElements(long[][] queries) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar findProductsOfElements = function(queries) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findProductsOfElements(queries: number[][]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function findProductsOfElements($queries) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findProductsOfElements(_ queries: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findProductsOfElements(queries: Array<LongArray>): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findProductsOfElements(List<List<int>> queries) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findProductsOfElements(queries [][]int64) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} queries\n# @return {Integer[]}\ndef find_products_of_elements(queries)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findProductsOfElements(queries: Array[Array[Long]]): Array[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_products_of_elements(queries: Vec<Vec<i64>>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-products-of-elements queries)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_products_of_elements(Queries :: [[integer()]]) -> [integer()].\nfind_products_of_elements(Queries) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_products_of_elements(queries :: [[integer]]) :: [integer]\n  def find_products_of_elements(queries) do\n    \n  end\nend"}],"testcase":"[[1,3,7]]","testable":true,"templateMeta":{"name":"findProductsOfElements","params":[{"name":"queries","type":"long[][]"}],"return":{"type":"integer[]"}}}