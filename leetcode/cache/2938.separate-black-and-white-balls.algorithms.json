{"id":3195,"fid":"2938","name":"区分黑球与白球","slug":"separate-black-and-white-balls","link":"https://leetcode.cn/problems/separate-black-and-white-balls/description/","percent":54.51710697271546,"level":"Medium","category":"algorithms","en_name":"Separate Black and White Balls","cn_name":"区分黑球与白球","totalAC":"10.5K","totalSubmit":"17K","likes":21,"dislikes":0,"desc":"<p>桌子上有 <code>n</code> 个球，每个球的颜色不是黑色，就是白色。</p>\n\n<p>给你一个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的二进制字符串 <code>s</code>，其中 <code>1</code> 和 <code>0</code> 分别代表黑色和白色的球。</p>\n\n<p>在每一步中，你可以选择两个相邻的球并交换它们。</p>\n\n<p>返回「将所有黑色球都移到右侧，所有白色球都移到左侧所需的 <strong>最小步数</strong>」。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"101\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们可以按以下方式将所有黑色球移到右侧：\n- 交换 s[0] 和 s[1]，s = \"011\"。\n最开始，1 没有都在右侧，需要至少 1 步将其移到右侧。</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"100\"\n<strong>输出：</strong>2\n<strong>解释：</strong>我们可以按以下方式将所有黑色球移到右侧：\n- 交换 s[0] 和 s[1]，s = \"010\"。\n- 交换 s[1] 和 s[2]，s = \"001\"。\n可以证明所需的最小步数为 2 。\n</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"0111\"\n<strong>输出：</strong>0\n<strong>解释：</strong>所有黑色球都已经在右侧。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> 不是 <code>'0'</code>，就是 <code>'1'</code>。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    long long minimumSteps(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public long minimumSteps(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumSteps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumSteps(self, s: str) -> int:"},{"value":"c","text":"C","defaultCode":"long long minimumSteps(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public long MinimumSteps(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar minimumSteps = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumSteps(s: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumSteps($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumSteps(_ s: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumSteps(s: String): Long {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumSteps(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumSteps(s string) int64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef minimum_steps(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumSteps(s: String): Long = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_steps(s: String) -> i64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-steps s)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_steps(S :: unicode:unicode_binary()) -> integer().\nminimum_steps(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_steps(s :: String.t) :: integer\n  def minimum_steps(s) do\n    \n  end\nend"}],"testcase":"\"101\"","testable":true,"templateMeta":{"name":"minimumSteps","params":[{"type":"string","name":"s"}],"return":{"type":"long"}}}